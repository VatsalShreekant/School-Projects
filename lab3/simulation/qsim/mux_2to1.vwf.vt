// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2018 11:30:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_2to1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_2to1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in0;
reg [31:0] in1;
reg sel;
// wires                                               
wire [31:0] y;

// assign statements (if any)                          
mux_2to1 i1 (
// port map - connection between master ports and signals/registers   
	.in0(in0),
	.in1(in1),
	.sel(sel),
	.y(y)
);
initial 
begin 
#100000 $finish;
end 
// in0[ 31 ]
initial
begin
	in0[31] = 1'b0;
end 
// in0[ 30 ]
initial
begin
	in0[30] = 1'b0;
end 
// in0[ 29 ]
initial
begin
	in0[29] = 1'b0;
end 
// in0[ 28 ]
initial
begin
	in0[28] = 1'b0;
end 
// in0[ 27 ]
initial
begin
	in0[27] = 1'b0;
end 
// in0[ 26 ]
initial
begin
	in0[26] = 1'b0;
end 
// in0[ 25 ]
initial
begin
	in0[25] = 1'b0;
end 
// in0[ 24 ]
initial
begin
	in0[24] = 1'b0;
end 
// in0[ 23 ]
initial
begin
	in0[23] = 1'b0;
end 
// in0[ 22 ]
initial
begin
	in0[22] = 1'b0;
end 
// in0[ 21 ]
initial
begin
	in0[21] = 1'b0;
end 
// in0[ 20 ]
initial
begin
	in0[20] = 1'b0;
end 
// in0[ 19 ]
initial
begin
	in0[19] = 1'b0;
end 
// in0[ 18 ]
initial
begin
	in0[18] = 1'b0;
end 
// in0[ 17 ]
initial
begin
	in0[17] = 1'b0;
end 
// in0[ 16 ]
initial
begin
	in0[16] = 1'b0;
end 
// in0[ 15 ]
initial
begin
	in0[15] = 1'b0;
end 
// in0[ 14 ]
initial
begin
	in0[14] = 1'b0;
end 
// in0[ 13 ]
initial
begin
	in0[13] = 1'b0;
end 
// in0[ 12 ]
initial
begin
	in0[12] = 1'b0;
end 
// in0[ 11 ]
initial
begin
	in0[11] = 1'b0;
end 
// in0[ 10 ]
initial
begin
	in0[10] = 1'b0;
end 
// in0[ 9 ]
initial
begin
	in0[9] = 1'b0;
end 
// in0[ 8 ]
initial
begin
	in0[8] = 1'b0;
end 
// in0[ 7 ]
initial
begin
	in0[7] = 1'b0;
end 
// in0[ 6 ]
initial
begin
	in0[6] = 1'b0;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
	in0[5] = #70000 1'b1;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b0;
	in0[4] = #40000 1'b1;
	in0[4] = #30000 1'b0;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b0;
	# 20000;
	repeat(2)
	begin
		in0[3] = 1'b1;
		in0[3] = #20000 1'b0;
		# 10000;
	end
	in0[3] = 1'b1;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
	in0[2] = #10000 1'b1;
	in0[2] = #10000 1'b0;
	in0[2] = #10000 1'b1;
	in0[2] = #20000 1'b0;
	in0[2] = #10000 1'b1;
	in0[2] = #10000 1'b0;
	in0[2] = #20000 1'b1;
end 
// in0[ 1 ]
initial
begin
	repeat(2)
	begin
		in0[1] = 1'b0;
		in0[1] = #20000 1'b1;
		# 20000;
	end
	in0[1] = 1'b0;
end 
// in0[ 0 ]
always
begin
	in0[0] = 1'b0;
	in0[0] = #10000 1'b1;
	#10000;
end 
// in1[ 31 ]
initial
begin
	in1[31] = 1'b0;
end 
// in1[ 30 ]
initial
begin
	in1[30] = 1'b0;
end 
// in1[ 29 ]
initial
begin
	in1[29] = 1'b0;
end 
// in1[ 28 ]
initial
begin
	in1[28] = 1'b0;
end 
// in1[ 27 ]
initial
begin
	in1[27] = 1'b0;
end 
// in1[ 26 ]
initial
begin
	in1[26] = 1'b0;
end 
// in1[ 25 ]
initial
begin
	in1[25] = 1'b0;
end 
// in1[ 24 ]
initial
begin
	in1[24] = 1'b0;
end 
// in1[ 23 ]
initial
begin
	in1[23] = 1'b0;
end 
// in1[ 22 ]
initial
begin
	in1[22] = 1'b0;
end 
// in1[ 21 ]
initial
begin
	in1[21] = 1'b0;
end 
// in1[ 20 ]
initial
begin
	in1[20] = 1'b0;
end 
// in1[ 19 ]
initial
begin
	in1[19] = 1'b0;
end 
// in1[ 18 ]
initial
begin
	in1[18] = 1'b0;
end 
// in1[ 17 ]
initial
begin
	in1[17] = 1'b0;
end 
// in1[ 16 ]
initial
begin
	in1[16] = 1'b0;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b0;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b0;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b0;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b1;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b0;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b0;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b1;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b1;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
	in1[5] = #70000 1'b1;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
	in1[4] = #30000 1'b1;
	in1[4] = #40000 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
	# 10000;
	repeat(2)
	begin
		in1[3] = 1'b1;
		in1[3] = #20000 1'b0;
		# 20000;
	end
	in1[3] = 1'b1;
end 
// in1[ 2 ]
initial
begin
	repeat(4)
	begin
		in1[2] = 1'b1;
		in1[2] = #10000 1'b0;
		# 10000;
	end
	in1[2] = 1'b1;
	in1[2] = #10000 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b1;
end 

// sel
initial
begin
	sel = 1'b0;
	sel = #50000 1'b1;
end 
endmodule

