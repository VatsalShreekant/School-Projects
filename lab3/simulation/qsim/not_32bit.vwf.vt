// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2018 11:26:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          not_32bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module not_32bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] x;
// wires                                               
wire [31:0] y;

// assign statements (if any)                          
not_32bit i1 (
// port map - connection between master ports and signals/registers   
	.x(x),
	.y(y)
);
initial 
begin 
#100000 $finish;
end 
// x[ 31 ]
initial
begin
	x[31] = 1'b0;
end 
// x[ 30 ]
initial
begin
	x[30] = 1'b0;
end 
// x[ 29 ]
initial
begin
	x[29] = 1'b0;
end 
// x[ 28 ]
initial
begin
	x[28] = 1'b0;
end 
// x[ 27 ]
initial
begin
	x[27] = 1'b0;
end 
// x[ 26 ]
initial
begin
	x[26] = 1'b0;
end 
// x[ 25 ]
initial
begin
	x[25] = 1'b0;
end 
// x[ 24 ]
initial
begin
	x[24] = 1'b0;
end 
// x[ 23 ]
initial
begin
	x[23] = 1'b0;
end 
// x[ 22 ]
initial
begin
	x[22] = 1'b0;
end 
// x[ 21 ]
initial
begin
	x[21] = 1'b0;
end 
// x[ 20 ]
initial
begin
	x[20] = 1'b0;
end 
// x[ 19 ]
initial
begin
	x[19] = 1'b0;
end 
// x[ 18 ]
initial
begin
	x[18] = 1'b0;
end 
// x[ 17 ]
initial
begin
	x[17] = 1'b0;
end 
// x[ 16 ]
initial
begin
	x[16] = 1'b0;
end 
// x[ 15 ]
initial
begin
	x[15] = 1'b0;
end 
// x[ 14 ]
initial
begin
	x[14] = 1'b0;
end 
// x[ 13 ]
initial
begin
	x[13] = 1'b0;
end 
// x[ 12 ]
initial
begin
	x[12] = 1'b0;
end 
// x[ 11 ]
initial
begin
	x[11] = 1'b0;
end 
// x[ 10 ]
initial
begin
	x[10] = 1'b0;
end 
// x[ 9 ]
initial
begin
	x[9] = 1'b0;
end 
// x[ 8 ]
initial
begin
	x[8] = 1'b0;
end 
// x[ 7 ]
initial
begin
	x[7] = 1'b0;
end 
// x[ 6 ]
initial
begin
	x[6] = 1'b0;
end 
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
	x[3] = #80000 1'b1;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #40000 1'b1;
	x[2] = #40000 1'b0;
end 
// x[ 1 ]
initial
begin
	repeat(2)
	begin
		x[1] = 1'b0;
		x[1] = #20000 1'b1;
		# 20000;
	end
	x[1] = 1'b0;
end 
// x[ 0 ]
always
begin
	x[0] = 1'b0;
	x[0] = #10000 1'b1;
	#10000;
end 
endmodule

