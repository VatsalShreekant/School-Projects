// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2019 14:39:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_MUX;
reg [2:0] ALU_Op;
reg B_MUX;
reg Clk;
reg Clr_A;
reg Clr_B;
reg Clr_C;
reg Clr_IR;
reg Clr_PC;
reg Clr_Z;
reg [31:0] DATA_IN;
reg [1:0] DATA_Mux;
reg EN;
reg IM_MUX1;
reg [1:0] IM_MUX2;
reg Inc_PC;
reg Ld_A;
reg Ld_B;
reg Ld_C;
reg Ld_IR;
reg Ld_PC;
reg Ld_Z;
reg mClk;
reg REG_Mux;
reg WEN;
// wires                                               
wire [31:0] ADDR_OUT;
wire [31:0] DATA_OUT;
wire [7:0] MEM_ADDR;
wire [31:0] MEM_IN;
wire [31:0] MEM_OUT;
wire [31:0] Out_A;
wire [31:0] Out_B;
wire Out_C;
wire [31:0] Out_IR;
wire [31:0] Out_PC;
wire Out_Z;

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.A_MUX(A_MUX),
	.ADDR_OUT(ADDR_OUT),
	.ALU_Op(ALU_Op),
	.B_MUX(B_MUX),
	.Clk(Clk),
	.Clr_A(Clr_A),
	.Clr_B(Clr_B),
	.Clr_C(Clr_C),
	.Clr_IR(Clr_IR),
	.Clr_PC(Clr_PC),
	.Clr_Z(Clr_Z),
	.DATA_IN(DATA_IN),
	.DATA_Mux(DATA_Mux),
	.DATA_OUT(DATA_OUT),
	.EN(EN),
	.IM_MUX1(IM_MUX1),
	.IM_MUX2(IM_MUX2),
	.Inc_PC(Inc_PC),
	.Ld_A(Ld_A),
	.Ld_B(Ld_B),
	.Ld_C(Ld_C),
	.Ld_IR(Ld_IR),
	.Ld_PC(Ld_PC),
	.Ld_Z(Ld_Z),
	.mClk(mClk),
	.MEM_ADDR(MEM_ADDR),
	.MEM_IN(MEM_IN),
	.MEM_OUT(MEM_OUT),
	.Out_A(Out_A),
	.Out_B(Out_B),
	.Out_C(Out_C),
	.Out_IR(Out_IR),
	.Out_PC(Out_PC),
	.Out_Z(Out_Z),
	.REG_Mux(REG_Mux),
	.WEN(WEN)
);
initial 
begin 
#1000000 $finish;
end 

// mClk
always
begin
	mClk = 1'b0;
	mClk = #20000 1'b1;
	#20000;
end 

// Clk
initial
begin
	repeat(12)
	begin
		Clk = 1'b0;
		Clk = #40000 1'b1;
		# 40000;
	end
	Clk = 1'b0;
end 

// A_MUX
initial
begin
	A_MUX = 1'b0;
end 

// B_MUX
initial
begin
	B_MUX = 1'b1;
end 

// IM_MUX1
initial
begin
	IM_MUX1 = 1'b0;
end 
// IM_MUX2[ 1 ]
initial
begin
	IM_MUX2[1] = 1'b0;
end 
// IM_MUX2[ 0 ]
initial
begin
	IM_MUX2[0] = 1'b0;
end 

// REG_Mux
initial
begin
	REG_Mux = 1'b0;
end 
// DATA_Mux[ 1 ]
initial
begin
	DATA_Mux[1] = 1'b0;
	DATA_Mux[1] = #360000 1'b1;
end 
// DATA_Mux[ 0 ]
initial
begin
	DATA_Mux[0] = 1'b0;
end 
// ALU_Op[ 2 ]
initial
begin
	ALU_Op[2] = 1'b0;
end 
// ALU_Op[ 1 ]
initial
begin
	ALU_Op[1] = 1'b0;
	ALU_Op[1] = #480000 1'b1;
	ALU_Op[1] = #500000 1'b0;
end 
// ALU_Op[ 0 ]
initial
begin
	ALU_Op[0] = 1'b0;
end 

// Clr_A
initial
begin
	Clr_A = 1'b0;
end 

// Clr_B
initial
begin
	Clr_B = 1'b0;
end 

// Clr_C
initial
begin
	Clr_C = 1'b0;
end 

// Clr_IR
initial
begin
	Clr_IR = 1'b0;
end 

// Clr_PC
initial
begin
	Clr_PC = 1'b0;
end 

// Clr_Z
initial
begin
	Clr_Z = 1'b0;
end 

// EN
initial
begin
	EN = 1'b1;
end 

// WEN
initial
begin
	WEN = 1'b0;
	WEN = #440000 1'b1;
end 
// DATA_IN[ 31 ]
initial
begin
	DATA_IN[31] = 1'b0;
end 
// DATA_IN[ 30 ]
initial
begin
	DATA_IN[30] = 1'b1;
end 
// DATA_IN[ 29 ]
initial
begin
	DATA_IN[29] = 1'b0;
end 
// DATA_IN[ 28 ]
initial
begin
	DATA_IN[28] = 1'b1;
end 
// DATA_IN[ 27 ]
initial
begin
	DATA_IN[27] = 1'b0;
end 
// DATA_IN[ 26 ]
initial
begin
	DATA_IN[26] = 1'b1;
end 
// DATA_IN[ 25 ]
initial
begin
	DATA_IN[25] = 1'b0;
end 
// DATA_IN[ 24 ]
initial
begin
	DATA_IN[24] = 1'b1;
end 
// DATA_IN[ 23 ]
initial
begin
	DATA_IN[23] = 1'b0;
end 
// DATA_IN[ 22 ]
initial
begin
	DATA_IN[22] = 1'b1;
end 
// DATA_IN[ 21 ]
initial
begin
	DATA_IN[21] = 1'b0;
end 
// DATA_IN[ 20 ]
initial
begin
	DATA_IN[20] = 1'b1;
end 
// DATA_IN[ 19 ]
initial
begin
	DATA_IN[19] = 1'b0;
end 
// DATA_IN[ 18 ]
initial
begin
	DATA_IN[18] = 1'b1;
end 
// DATA_IN[ 17 ]
initial
begin
	DATA_IN[17] = 1'b0;
end 
// DATA_IN[ 16 ]
initial
begin
	DATA_IN[16] = 1'b1;
end 
// DATA_IN[ 15 ]
initial
begin
	DATA_IN[15] = 1'b0;
end 
// DATA_IN[ 14 ]
initial
begin
	DATA_IN[14] = 1'b1;
end 
// DATA_IN[ 13 ]
initial
begin
	DATA_IN[13] = 1'b0;
end 
// DATA_IN[ 12 ]
initial
begin
	DATA_IN[12] = 1'b1;
end 
// DATA_IN[ 11 ]
initial
begin
	DATA_IN[11] = 1'b0;
end 
// DATA_IN[ 10 ]
initial
begin
	DATA_IN[10] = 1'b1;
end 
// DATA_IN[ 9 ]
initial
begin
	DATA_IN[9] = 1'b0;
end 
// DATA_IN[ 8 ]
initial
begin
	DATA_IN[8] = 1'b1;
end 
// DATA_IN[ 7 ]
initial
begin
	DATA_IN[7] = 1'b0;
end 
// DATA_IN[ 6 ]
initial
begin
	DATA_IN[6] = 1'b1;
end 
// DATA_IN[ 5 ]
initial
begin
	DATA_IN[5] = 1'b0;
end 
// DATA_IN[ 4 ]
initial
begin
	DATA_IN[4] = 1'b1;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b0;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b1;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b0;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b1;
end 

// Inc_PC
initial
begin
	Inc_PC = 1'b1;
	Inc_PC = #340000 1'b0;
end 

// Ld_A
initial
begin
	Ld_A = 1'b1;
	Ld_A = #760000 1'b0;
end 

// Ld_B
initial
begin
	Ld_B = 1'b1;
	Ld_B = #760000 1'b0;
end 

// Ld_C
initial
begin
	Ld_C = 1'b1;
	Ld_C = #760000 1'b0;
end 

// Ld_IR
initial
begin
	Ld_IR = 1'b0;
	Ld_IR = #20000 1'b1;
	Ld_IR = #740000 1'b0;
end 

// Ld_PC
initial
begin
	Ld_PC = 1'b0;
	Ld_PC = #20000 1'b1;
	Ld_PC = #740000 1'b0;
end 

// Ld_Z
initial
begin
	Ld_Z = 1'b0;
	Ld_Z = #20000 1'b1;
	Ld_Z = #740000 1'b0;
end 
endmodule

