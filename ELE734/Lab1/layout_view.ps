%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
%%Page: cds 1
gis
0 0 2549 1246 clwin
ssls
0 0 0 slc
0 0 0 sfc
35 1221 dlt
0 -29 dlv
1 -7 dlv
2 -5 dlv
5 -1 dlv
11 0 dlv
5 1 dlv
2 5 dlv
1 7 dlv
0 29 dlv
dle
74 1186 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
136 1179 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 135 1201 dls
148 1179 dlt
0 42 dlv
21 0 dlv
4 -3 dlv
0 -4 dlv
0 -10 dlv
0 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
169 1197 dlt
4 -2 dlv
0 -5 dlv
0 -11 dlv
dle
188 1203 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
188 1183 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
211 1209 dlt
11 -30 dlv
11 30 dlv
dle
245 1185 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
0 42 277 1179 dls
277 1200 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
0 30 309 1179 dls
309 1200 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
338 1195 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
371 1195 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 404 1179 dls
404 1195 dlt
4 0 dlv
13 14 dlv
dle
14 -16 408 1195 dls
434 1203 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
454 1192 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
35 1111 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
76 1111 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 102 1122 dls
25 0 119 1153 dls
0 -42 132 1153 dls
180 1111 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 179 1133 dls
195 1135 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
195 1115 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
218 1118 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
256 1141 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 276 1141 dls
0 30 288 1111 dls
288 1132 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
338 1111 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
391 1132 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
19 0 403 1141 dls
408 1149 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
444 1138 dlt
12 15 dlv
0 -42 dlv
dle
488 1134 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
514 1138 dlt
12 15 dlv
0 -42 dlv
dle
563 1145 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
578 1135 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
578 1115 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
592 1146 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
613 1134 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
655 1122 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
670 1135 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
670 1115 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
684 1118 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
746 1145 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
768 1145 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
813 1111 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 804 1111 dls
843 1145 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
888 1111 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 879 1111 dls
35 1044 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
73 1086 dlt
0 -42 dlv
21 0 dlv
dle
115 1044 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
25 0 148 1086 dls
0 -42 161 1086 dls
194 1051 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
0 42 232 1044 dls
245 1086 dlt
25 0 dlv
-26 -42 dlv
27 0 dlv
dle
307 1044 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 306 1066 dls
322 1068 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
322 1048 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
371 1055 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
388 1044 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
400 1086 dlt
26 0 dlv
-19 -42 dlv
dle
438 1052 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
20 30 484 1044 dls
20 -30 485 1074 dls
526 1071 dlt
12 15 dlv
0 -42 dlv
dle
550 1071 dlt
12 15 dlv
0 -42 dlv
dle
579 1044 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
600 1044 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 591 1044 dls
638 1044 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 629 1044 dls
0 42 676 1044 dls
0 30 688 1044 dls
688 1065 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
740 1065 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 42 752 1044 dls
752 1065 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
784 1060 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
817 1050 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 976 dlt
0 42 dlv
18 -42 dlv
18 43 dlv
0 -43 dlv
dle
83 1000 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
103 989 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
116 969 dlt
4 -3 dlv
11 0 dlv
3 3 dlv
2 5 dlv
0 32 dlv
dle
136 997 dlt
-2 6 dlv
-3 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -9 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 6 dlv
dle
0 30 148 976 dls
148 997 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 180 976 dls
0 4 180 1014 dls
197 976 dlt
0 37 dlv
2 4 dlv
4 1 dlv
3 0 dlv
dle
15 0 192 1003 dls
0 30 219 976 dls
0 4 219 1014 dls
251 997 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
263 1000 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
283 989 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
19 0 295 1006 dls
300 1014 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
0 30 327 976 dls
0 4 327 1014 dls
344 976 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 30 372 976 dls
372 997 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
407 1000 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
407 980 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
430 1011 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
451 999 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
467 983 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
529 1010 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
541 1003 dlt
12 15 dlv
0 -42 dlv
dle
565 984 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
607 976 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
619 983 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
676 999 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
28 42 693 976 dls
28 -42 694 1018 dls
35 951 dlt
0 -42 dlv
21 0 dlv
dle
0 30 68 909 dls
0 4 68 947 dls
0 42 80 909 dls
80 930 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
0 30 113 909 dls
113 930 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
142 933 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
162 922 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 174 909 dls
174 930 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
203 939 dlt
10 -30 dlv
10 30 dlv
dle
213 909 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
238 933 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
238 913 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
270 951 dlt
0 -42 dlv
21 0 dlv
dle
303 933 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
323 922 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 42 335 909 dls
335 930 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
368 936 dlt
12 15 dlv
0 -42 dlv
dle
26 0 392 907 dls
0 42 432 909 dls
444 933 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
464 922 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
476 939 dlt
10 -30 dlv
10 30 dlv
dle
486 909 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
513 909 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
541 939 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 561 939 dls
19 0 573 939 dls
578 947 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
63 872 dlt
-1 6 dlv
-2 4 dlv
-5 1 dlv
-12 0 dlv
-5 -1 dlv
-2 -5 dlv
-1 -8 dlv
0 -14 dlv
1 -9 dlv
2 -4 dlv
5 -1 dlv
12 0 dlv
5 1 dlv
2 5 dlv
1 5 dlv
dle
75 857 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 108 841 dls
0 42 120 841 dls
135 865 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
135 845 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 30 275 841 dls
275 862 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 307 841 dls
307 862 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
324 862 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
358 841 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
386 847 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 815 dlt
14 -42 dlv
15 42 dlv
dle
0 30 76 773 dls
0 4 76 811 dls
88 789 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
121 803 dlt
8 -30 dlv
7 30 dlv
8 -30 dlv
8 30 dlv
dle
167 797 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
167 777 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 280 773 dls
292 797 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
312 786 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
324 803 dlt
10 -30 dlv
10 30 dlv
dle
334 773 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
361 773 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
389 803 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 409 803 dls
19 0 421 803 dls
426 811 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
35 706 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
0 42 73 706 dls
90 706 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
19 0 118 736 dls
123 744 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
159 706 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 185 717 dls
0 30 202 706 dls
202 727 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
231 722 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
264 730 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
284 719 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
299 730 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
299 710 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
340 748 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
361 748 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
382 706 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 373 706 dls
416 706 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
437 706 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 428 706 dls
467 740 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
21 0 514 724 dls
549 733 dlt
12 15 dlv
0 -42 dlv
dle
578 706 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
590 748 dlt
26 0 dlv
-19 -42 dlv
dle
648 729 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
665 741 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
686 729 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
702 748 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
741 748 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
753 741 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
774 729 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
795 706 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
833 717 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
871 717 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
917 740 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
934 706 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
955 706 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 946 706 dls
1009 740 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
1021 733 dlt
12 15 dlv
0 -42 dlv
dle
1045 748 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
1066 748 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
29 334 383 571 clwin
1000 1000 1000 slc
1000 1000 1000 sfc
118 295 38 444 dbu
0 0 0 slc
0 0 0 sfc
10 0 41 427 dls
44 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 3 dlv
dle
58 420 dlt
11 0 dlv
0 2 dlv
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
7 0 dlv
1 2 dlv
dle
11 16 75 411 dls
10 -16 76 427 dls
10 0 92 427 dls
95 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
125 422 dlt
0 3 dlv
-3 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
3 2 dlv
0 2 dlv
dle
0 -22 125 433 dls
0 16 131 411 dls
131 422 dlt
2 3 dlv
1 2 dlv
4 0 dlv
1 -2 dlv
1 -3 dlv
dle
147 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
157 418 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 1 dlv
dle
163 427 dlt
5 -16 dlv
3 16 dlv
4 -16 dlv
5 16 dlv
dle
0 16 186 411 dls
0 2 186 431 dls
0 16 192 411 dls
192 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
210 407 dlt
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
220 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
385 334 739 571 clwin
1 fds
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 fde
1 sfp
0 0 1000 slc
0 0 1000 sfc
393 444 689 562 dbf
118 296 393 444 dbu
0 0 0 slc
0 0 0 sfc
0 16 397 411 dls
397 422 dlt
1 3 dlv
1 2 dlv
4 0 dlv
1 -2 dlv
1 -3 dlv
0 -11 dlv
dle
405 422 dlt
2 3 dlv
1 2 dlv
4 0 dlv
1 -2 dlv
1 -3 dlv
0 -11 dlv
dle
421 420 dlt
11 0 dlv
0 2 dlv
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
7 0 dlv
1 2 dlv
dle
10 0 438 427 dls
441 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 3 dlv
dle
455 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
465 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
0 22 472 411 dls
478 425 dlt
6 8 dlv
0 -22 dlv
dle
506 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
0 -22 506 433 dls
0 16 513 411 dls
513 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
1 -2 dlv
2 -3 dlv
dle
528 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
538 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
545 427 dlt
4 -16 dlv
3 16 dlv
5 -16 dlv
4 16 dlv
dle
0 16 567 411 dls
0 2 567 431 dls
0 16 573 411 dls
573 422 dlt
2 3 dlv
1 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
591 407 dlt
2 -1 dlv
6 0 dlv
1 1 dlv
1 3 dlv
0 17 dlv
dle
601 422 dlt
-1 3 dlv
-1 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
740 334 1094 571 clwin
2 fds
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 fde
2 sfp
549 549 651 slc
702 702 702 sfc
749 444 1044 562 dbf
118 295 749 444 dbu
0 0 0 slc
0 0 0 sfc
0 21 752 406 dls
752 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -6 dlv
0 -3 dlv
-3 -2 dlv
-5 0 dlv
-2 2 dlv
-1 3 dlv
dle
0 21 769 406 dls
769 422 dlt
1 3 dlv
2 2 dlv
6 0 dlv
1 -2 dlv
1 -3 dlv
0 -6 dlv
0 -3 dlv
-2 -2 dlv
-6 0 dlv
-2 2 dlv
-1 3 dlv
dle
0 22 787 411 dls
793 427 dlt
0 -11 dlv
1 -3 dlv
2 -2 dlv
4 0 dlv
2 2 dlv
2 2 dlv
dle
0 -16 804 427 dls
810 414 dlt
1 -2 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
0 1 dlv
0 4 dlv
0 1 dlv
-2 2 dlv
-6 0 dlv
-1 0 dlv
-1 2 dlv
0 2 dlv
1 2 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -2 dlv
dle
842 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
0 -22 842 433 dls
0 16 849 411 dls
849 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
dle
864 424 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
874 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
881 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
0 16 903 411 dls
0 2 903 431 dls
0 16 910 411 dls
910 422 dlt
1 3 dlv
1 2 dlv
5 0 dlv
3 -2 dlv
0 -3 dlv
0 -11 dlv
dle
927 407 dlt
2 -1 dlv
6 0 dlv
1 1 dlv
1 3 dlv
0 17 dlv
dle
937 422 dlt
-1 3 dlv
-1 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
1096 334 1450 571 clwin
1000 1000 1000 slc
549 549 651 sfc
1104 444 1400 562 dbs
0 0 0 slc
0 0 0 sfc
1118 422 dlt
0 3 dlv
-3 2 dlv
-5 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
5 0 dlv
3 2 dlv
0 2 dlv
dle
1127 411 dlt
-2 2 dlv
-1 3 dlv
0 6 dlv
1 3 dlv
2 2 dlv
6 0 dlv
2 -2 dlv
0 -3 dlv
0 -6 dlv
0 -3 dlv
-2 -2 dlv
-6 0 dlv
dle
0 16 1142 411 dls
1142 422 dlt
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
0 -3 dlv
0 -11 dlv
dle
10 0 1159 427 dls
1161 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
1175 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
1186 418 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 1 dlv
dle
1203 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
dle
10 0 1209 427 dls
1212 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
1241 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-2 -3 dlv
0 -6 dlv
2 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
0 -22 1241 433 dls
0 16 1248 411 dls
1248 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
dle
1263 424 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
2 -2 dlv
0 -13 dlv
dle
1274 418 dlt
-2 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
2 1 dlv
dle
1280 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
0 16 1302 411 dls
0 2 1302 431 dls
0 16 1309 411 dls
1309 422 dlt
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
0 -3 dlv
0 -11 dlv
dle
1326 407 dlt
2 -1 dlv
6 0 dlv
1 1 dlv
2 3 dlv
0 17 dlv
dle
1337 422 dlt
-2 3 dlv
-1 2 dlv
-6 0 dlv
-1 -2 dlv
-2 -3 dlv
0 -5 dlv
2 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
1451 334 1805 571 clwin
3 fds
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 fde
3 sfp
149 549 420 slc
0 800 400 sfc
1460 444 1755 562 dbf
118 295 1460 444 dbu
0 0 0 slc
0 0 0 sfc
0 16 1463 411 dls
1463 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
0 21 1480 406 dls
1480 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -6 dlv
-1 -3 dlv
-2 -2 dlv
-5 0 dlv
-2 2 dlv
-1 3 dlv
dle
0 22 1497 411 dls
1504 427 dlt
0 -11 dlv
1 -3 dlv
1 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
dle
0 -16 1514 427 dls
1520 414 dlt
1 -2 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 1 dlv
0 4 dlv
-1 1 dlv
-2 2 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 2 dlv
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
dle
1553 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
dle
0 -22 1553 433 dls
0 16 1559 411 dls
1559 422 dlt
2 3 dlv
1 2 dlv
4 0 dlv
1 -2 dlv
1 -3 dlv
dle
1574 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
1585 418 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 1 dlv
dle
1591 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
5 16 dlv
dle
0 16 1614 411 dls
0 2 1614 431 dls
0 16 1620 411 dls
1620 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
1637 407 dlt
3 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
1648 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
1807 334 2161 571 clwin
4 fds
4 <0000> fdf
4 <0000> fdf
4 <f1f1> fdf
4 <1111> fdf
4 <1111> fdf
4 <1f1f> fdf
4 <0000> fdf
4 <0000> fdf
4 <0000> fdf
4 <0000> fdf
4 <f1f1> fdf
4 <1111> fdf
4 <1111> fdf
4 <1f1f> fdf
4 <0000> fdf
4 <0000> fdf
4 fde
4 sfp
149 549 420 slc
149 549 420 sfc
1816 444 2111 562 dbf
118 295 1816 444 dbu
0 0 0 slc
0 0 0 sfc
1819 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
1829 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
1846 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-1 -2 dlv
-2 -3 dlv
0 -6 dlv
2 -3 dlv
1 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
dle
10 0 1852 427 dls
1855 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
0 16 1869 411 dls
0 2 1869 431 dls
1875 427 dlt
6 -16 dlv
6 16 dlv
dle
1893 420 dlt
11 0 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
dle
1926 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
0 -22 1926 433 dls
0 16 1933 411 dls
1933 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
1 -2 dlv
2 -3 dlv
dle
1948 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
1958 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
1965 427 dlt
4 -16 dlv
3 16 dlv
5 -16 dlv
4 16 dlv
dle
0 16 1987 411 dls
0 2 1987 431 dls
0 16 1993 411 dls
1993 422 dlt
2 3 dlv
1 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
2011 407 dlt
2 -1 dlv
6 0 dlv
1 1 dlv
1 3 dlv
0 17 dlv
dle
2021 422 dlt
-1 3 dlv
-1 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
2162 334 2517 571 clwin
5 fds
5 <0101> fdf
5 <0606> fdf
5 <0808> fdf
5 <3030> fdf
5 <4040> fdf
5 <8181> fdf
5 <0202> fdf
5 <0c0c> fdf
5 <1010> fdf
5 <6060> fdf
5 <8080> fdf
5 <0303> fdf
5 <0404> fdf
5 <1818> fdf
5 <2020> fdf
5 <c0c0> fdf
5 fde
5 sfp
902 122 51 slc
902 122 51 sfc
2171 444 2466 562 dbf
118 295 2171 444 dbu
0 0 0 slc
0 0 0 sfc
0 21 2174 406 dls
2174 422 dlt
1 3 dlv
2 2 dlv
6 0 dlv
1 -2 dlv
1 -3 dlv
0 -6 dlv
0 -3 dlv
-2 -2 dlv
-6 0 dlv
-2 2 dlv
-1 3 dlv
dle
2194 411 dlt
-1 2 dlv
-1 3 dlv
0 6 dlv
1 3 dlv
1 2 dlv
6 0 dlv
2 -2 dlv
1 -3 dlv
0 -6 dlv
-1 -3 dlv
-2 -2 dlv
-6 0 dlv
dle
0 22 2209 411 dls
2215 427 dlt
5 -16 dlv
6 16 dlv
dle
2220 411 dlt
-1 -3 dlv
-1 -2 dlv
-1 0 dlv
dle
2232 425 dlt
6 8 dlv
0 -22 dlv
dle
2260 422 dlt
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 2 dlv
dle
0 -22 2260 433 dls
0 16 2267 411 dls
2267 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
1 -2 dlv
2 -3 dlv
dle
2282 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
2292 418 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
1 1 dlv
1 1 dlv
dle
2299 427 dlt
4 -16 dlv
3 16 dlv
5 -16 dlv
4 16 dlv
dle
0 16 2321 411 dls
0 2 2321 431 dls
0 16 2327 411 dls
2327 422 dlt
2 3 dlv
1 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
2345 407 dlt
2 -1 dlv
6 0 dlv
1 1 dlv
1 3 dlv
0 17 dlv
dle
2355 422 dlt
-1 3 dlv
-1 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 0 2550 1247 clwin
1246 2549 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
nxp
%%Page: cds 1
0 0 1437 3298 clwin
0 0 1437 3298 clwin
0 0 1438 3300 clwin
1 fds
1 <0000> fdf
1 <0000> fdf
1 <f1f1> fdf
1 <1111> fdf
1 <1111> fdf
1 <1f1f> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <f1f1> fdf
1 <1111> fdf
1 <1111> fdf
1 <1f1f> fdf
1 <0000> fdf
1 <0000> fdf
1 fde
1 sfp
149 549 420 slc
149 549 420 sfc
ssls
1105 1834 dpb
1290 1834 dpv
1290 2254 dpv
1105 2254 dpv
dpf
1105 1834 dpb
1290 1834 dpv
1290 2254 dpv
1105 2254 dpv
dpu
185 0 1105 2044 dls
147 1834 dpb
811 1834 dpv
811 2254 dpv
147 2254 dpv
dpf
147 1834 dpb
811 1834 dpv
811 2254 dpv
147 2254 dpv
dpu
664 0 147 2044 dls
2 fds
2 <0101> fdf
2 <0606> fdf
2 <0808> fdf
2 <3030> fdf
2 <4040> fdf
2 <8181> fdf
2 <0202> fdf
2 <0c0c> fdf
2 <1010> fdf
2 <6060> fdf
2 <8080> fdf
2 <0303> fdf
2 <0404> fdf
2 <1818> fdf
2 <2020> fdf
2 <c0c0> fdf
2 fde
2 sfp
902 122 51 slc
902 122 51 sfc
353 2406 dpb
353 1241 dpv
605 1241 dpv
605 2406 dpv
dpf
353 2406 dpb
353 1241 dpv
605 1241 dpv
605 2406 dpv
dpu
0 -1165 479 2406 dls
391 1073 567 1250 dbf
177 176 391 1073 dbu
3 fds
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 fde
3 sfp
149 549 420 slc
0 800 400 sfc
0 1687 dpb
958 1687 dpv
958 2402 dpv
0 2402 dpv
dpf
0 1687 dpb
958 1687 dpv
958 2402 dpv
0 2402 dpv
dpu
958 0 0 2044 dls
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
549 549 651 slc
702 702 702 sfc
958 1687 dpb
1437 1687 dpv
1437 2402 dpv
958 2402 dpv
dpf
958 1687 dpb
1437 1687 dpv
1437 2402 dpv
958 2402 dpv
dpu
479 0 958 2044 dls
1000 1000 1000 slc
549 549 651 sfc
1152 2116 dpb
1244 2116 dpv
1244 2208 dpv
1152 2208 dpv
dps
92 0 1152 2162 dls
672 1880 dpb
765 1880 dpv
765 1973 dpv
672 1973 dpv
dps
93 0 672 1927 dls
672 2116 dpb
765 2116 dpv
765 2208 dpv
672 2208 dpv
dps
93 0 672 2162 dls
193 2116 dpb
285 2116 dpv
285 2208 dpv
193 2208 dpv
dps
92 0 193 2162 dls
193 1880 dpb
285 1880 dpv
285 1973 dpv
193 1973 dpv
dps
92 0 193 1927 dls
1152 1880 dpb
1244 1880 dpv
1244 1973 dpv
1152 1973 dpv
dps
92 0 1152 1927 dls
433 1115 525 1208 dbs
5 fds
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 <0000> fdf
5 <1111> fdf
5 <0000> fdf
5 <4444> fdf
5 fde
5 sfp
0 0 1000 slc
0 0 1000 sfc
430 1250 dpb
430 791 dpv
527 791 dpv
527 1250 dpv
dpf
430 1250 dpb
430 791 dpv
527 791 dpv
527 1250 dpv
dpu
0 -459 479 1250 dls
1274 1838 dpb
1274 2801 dpv
1122 2801 dpv
1122 1838 dpv
dpf
1274 1838 dpb
1274 2801 dpv
1122 2801 dpv
1122 1838 dpv
dpu
0 963 1198 1838 dls
794 1838 dpb
794 2801 dpv
643 2801 dpv
643 1838 dpv
dpf
794 1838 dpb
794 2801 dpv
643 2801 dpv
643 1838 dpv
dpu
0 963 718 1838 dls
311 1838 dpb
311 2801 dpv
159 2801 dpv
159 1838 dpv
dpf
311 1838 dpb
311 2801 dpv
159 2801 dpv
159 1838 dpv
dpu
0 963 235 1838 dls
430 798 527 894 dbf
96 97 430 798 dbu
1149 2673 1246 2770 dbf
97 97 1149 2673 dbu
674 2673 771 2770 dbf
97 97 674 2673 dbu
191 2673 288 2770 dbf
97 97 191 2673 dbu
407 1090 550 1233 dbf
143 143 407 1090 dbu
549 549 651 slc
549 549 651 sfc
1437 0 0 749 dls
1000 1000 1000 slc
1000 1000 1000 sfc
96 97 430 798 dbu
1152 1880 dpb
1244 1880 dpv
1244 1973 dpv
1152 1973 dpv
dpu
92 0 1152 1927 dls
641 420 21 2657 dbu
0 1687 dpb
958 1687 dpv
958 2402 dpv
0 2402 dpv
dpu
958 0 0 2044 dls
672 1880 dpb
765 1880 dpv
765 1973 dpv
672 1973 dpv
dpu
93 0 672 1927 dls
672 2116 dpb
765 2116 dpv
765 2208 dpv
672 2208 dpv
dpu
93 0 672 2162 dls
147 1834 dpb
811 1834 dpv
811 2254 dpv
147 2254 dpv
dpu
664 0 147 2044 dls
640 420 269 0 dbu
311 1838 dpb
311 2801 dpv
159 2801 dpv
159 1838 dpv
dpu
0 963 235 1838 dls
177 176 391 1073 dbu
1274 1838 dpb
1274 2801 dpv
1122 2801 dpv
1122 1838 dpv
dpu
0 963 1198 1838 dls
958 1687 dpb
1437 1687 dpv
1437 2402 dpv
958 2402 dpv
dpu
479 0 958 2044 dls
353 2406 dpb
353 1241 dpv
605 1241 dpv
605 2406 dpv
dpu
0 -1165 479 2406 dls
430 1250 dpb
430 791 dpv
527 791 dpv
527 1250 dpv
dpu
0 -459 479 1250 dls
1105 1834 dpb
1290 1834 dpv
1290 2254 dpv
1105 2254 dpv
dpu
185 0 1105 2044 dls
193 1880 dpb
285 1880 dpv
285 1973 dpv
193 1973 dpv
dpu
92 0 193 1927 dls
97 97 1149 2673 dbu
794 1838 dpb
794 2801 dpv
643 2801 dpv
643 1838 dpv
dpu
0 963 718 1838 dls
1152 2116 dpb
1244 2116 dpv
1244 2208 dpv
1152 2208 dpv
dpu
92 0 1152 2162 dls
641 400 506 2657 dbu
97 97 191 2673 dbu
641 420 988 2657 dbu
97 97 674 2673 dbu
193 2116 dpb
285 2116 dpv
285 2208 dpv
193 2208 dpv
dpu
92 0 193 2162 dls
1000 1000 0 slc
1000 1000 0 sfc
1105 1834 dpb
1290 1834 dpv
1290 2254 dpv
1105 2254 dpv
dpu
185 0 1105 2044 dls
1105 1834 dpb
1290 1834 dpv
1290 2254 dpv
1105 2254 dpv
dpu
185 0 1105 2044 dls
gfs
%%Trailer
%%EOF
