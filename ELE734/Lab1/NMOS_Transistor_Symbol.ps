%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
%%Page: cds 1
gis
0 0 2125 674 clwin
ssls
0 0 0 slc
0 0 0 sfc
35 649 dlt
0 -29 dlv
1 -7 dlv
2 -5 dlv
5 -1 dlv
11 0 dlv
5 1 dlv
2 5 dlv
1 7 dlv
0 29 dlv
dle
74 614 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
136 607 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 135 629 dls
148 607 dlt
0 42 dlv
21 0 dlv
4 -3 dlv
0 -4 dlv
0 -10 dlv
0 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
169 625 dlt
4 -2 dlv
0 -5 dlv
0 -11 dlv
dle
188 631 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
188 611 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
211 637 dlt
11 -30 dlv
11 30 dlv
dle
245 613 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
0 42 277 607 dls
277 628 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
0 30 309 607 dls
309 628 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
338 623 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
371 623 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 404 607 dls
404 623 dlt
4 0 dlv
13 14 dlv
dle
14 -16 408 623 dls
434 631 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
454 620 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
35 539 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
76 539 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 102 550 dls
25 0 119 581 dls
0 -42 132 581 dls
180 539 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 179 561 dls
195 563 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
195 543 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
218 546 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
256 569 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 276 569 dls
0 30 288 539 dls
288 560 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
338 539 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
391 560 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
19 0 403 569 dls
408 577 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
444 566 dlt
12 15 dlv
0 -42 dlv
dle
488 562 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
514 566 dlt
12 15 dlv
0 -42 dlv
dle
563 573 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
578 563 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
578 543 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
592 546 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
629 574 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
650 562 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
669 563 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
669 543 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
684 573 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
720 581 dlt
26 0 dlv
-19 -42 dlv
dle
768 573 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
813 539 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 804 539 dls
843 573 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
888 539 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 879 539 dls
35 472 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
73 514 dlt
0 -42 dlv
21 0 dlv
dle
115 472 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
25 0 148 514 dls
0 -42 161 514 dls
194 479 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
0 42 232 472 dls
245 514 dlt
25 0 dlv
-26 -42 dlv
27 0 dlv
dle
307 472 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 306 494 dls
322 496 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
322 476 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
371 483 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
388 472 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
425 506 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
437 479 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
20 30 483 472 dls
20 -30 484 502 dls
525 499 dlt
12 15 dlv
0 -42 dlv
dle
558 472 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 549 472 dls
592 472 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
604 480 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
667 483 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
0 42 688 472 dls
0 30 700 472 dls
700 493 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
752 493 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 42 764 472 dls
764 493 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
796 488 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
829 478 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 446 dlt
0 -42 dlv
21 0 dlv
dle
0 30 68 404 dls
0 4 68 442 dls
0 42 80 404 dls
80 425 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
0 30 113 404 dls
113 425 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
142 428 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
162 417 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 174 404 dls
174 425 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
203 434 dlt
10 -30 dlv
10 30 dlv
dle
213 404 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
238 428 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
238 408 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
270 446 dlt
0 -42 dlv
21 0 dlv
dle
303 428 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
323 417 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 42 335 404 dls
335 425 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
368 431 dlt
12 15 dlv
0 -42 dlv
dle
26 0 392 402 dls
0 42 432 404 dls
444 428 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
464 417 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
476 434 dlt
10 -30 dlv
10 30 dlv
dle
486 404 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
513 404 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
541 434 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 561 434 dls
19 0 573 434 dls
578 442 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
63 368 dlt
-1 6 dlv
-2 4 dlv
-5 1 dlv
-12 0 dlv
-5 -1 dlv
-2 -5 dlv
-1 -8 dlv
0 -14 dlv
1 -9 dlv
2 -4 dlv
5 -1 dlv
12 0 dlv
5 1 dlv
2 5 dlv
1 5 dlv
dle
75 353 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 108 337 dls
0 42 120 337 dls
135 361 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
135 341 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 30 275 337 dls
275 358 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 307 337 dls
307 358 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
324 358 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
358 337 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
386 343 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 311 dlt
14 -42 dlv
15 42 dlv
dle
0 30 76 269 dls
0 4 76 307 dls
88 285 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
121 299 dlt
8 -30 dlv
7 30 dlv
8 -30 dlv
8 30 dlv
dle
167 293 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
167 273 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
280 275 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
312 299 dlt
10 -30 dlv
10 30 dlv
dle
322 269 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
0 30 344 269 dls
344 290 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
361 290 dlt
2 6 dlv
3 3 dlv
7 0 dlv
3 -3 dlv
2 -6 dlv
0 -21 dlv
dle
0 42 390 269 dls
390 290 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
428 269 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 42 456 269 dls
35 201 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
0 42 73 201 dls
90 201 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
19 0 118 231 dls
123 239 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
159 201 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 185 212 dls
0 30 202 201 dls
202 222 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
231 217 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
264 225 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
284 214 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
299 225 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
299 205 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
340 243 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
361 243 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
21 0 375 219 dls
419 201 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 410 201 dls
453 201 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
491 212 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
503 208 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
21 0 551 219 dls
595 201 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 586 201 dls
629 201 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
641 208 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
679 235 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
715 208 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
752 243 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
791 243 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
803 228 dlt
12 15 dlv
0 -42 dlv
dle
832 201 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
864 224 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
901 224 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
918 243 dlt
26 0 dlv
-19 -42 dlv
dle
956 208 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
1011 201 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 1002 201 dls
1045 201 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
1083 212 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
1120 235 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
1133 235 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
1169 208 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
1206 243 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
1227 243 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
674 2125 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
nxp
%%Page: cds 1
rotp
0 0 3281 1388 clwin
0 0 3281 1386 clwin
0 0 3281 1394 clwin
1000 0 0 slc
1000 0 0 sfc
ssls
1316 2018 631 35 dbu
1316 2018 631 35 dbu
1000 502 0 slc
1000 502 0 sfc
1273 563 dlt
-9 8 dlv
-8 5 dlv
-12 0 dlv
-9 -5 dlv
-8 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 9 dlv
dle
0 -88 1348 605 dls
1348 563 dlt
-8 8 dlv
-9 5 dlv
-12 0 dlv
-9 -5 dlv
-8 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
9 4 dlv
8 9 dlv
dle
1423 563 dlt
-4 8 dlv
-13 5 dlv
-12 0 dlv
-13 -5 dlv
-4 -8 dlv
4 -8 dlv
9 -4 dlv
21 -5 dlv
8 -4 dlv
4 -8 dlv
0 -4 dlv
-4 -9 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 9 dlv
dle
1452 517 dlt
0 88 dlv
38 0 dlv
13 -4 dlv
4 -5 dlv
4 -8 dlv
0 -12 dlv
-4 -9 dlv
-4 -4 dlv
-13 -4 dlv
-38 0 dlv
dle
0 -59 1586 576 dls
1586 563 dlt
-8 8 dlv
-9 5 dlv
-12 0 dlv
-8 -5 dlv
-9 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
9 -9 dlv
8 -4 dlv
12 0 dlv
9 4 dlv
8 9 dlv
dle
0 -59 1620 576 dls
1620 551 dlt
4 12 dlv
8 8 dlv
8 5 dlv
13 0 dlv
dle
0 -59 1720 576 dls
1720 563 dlt
-9 8 dlv
-8 5 dlv
-12 0 dlv
-9 -5 dlv
-8 -8 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 9 dlv
dle
0 -59 1753 576 dls
1753 559 dlt
13 12 dlv
8 5 dlv
13 0 dlv
8 -5 dlv
4 -12 dlv
0 -42 dlv
dle
1799 559 dlt
13 12 dlv
8 5 dlv
13 0 dlv
8 -5 dlv
4 -12 dlv
0 -42 dlv
dle
1908 622 dlt
-9 -9 dlv
-8 -12 dlv
-8 -17 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
8 -16 dlv
8 -13 dlv
9 -8 dlv
dle
1899 613 dlt
-8 -17 dlv
-4 -12 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
4 -12 dlv
8 -17 dlv
dle
1941 605 dlt
46 0 dlv
-25 -34 dlv
13 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -9 dlv
-4 -12 dlv
-8 -9 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 4 dlv
-4 9 dlv
dle
2016 622 dlt
9 -9 dlv
8 -12 dlv
8 -17 dlv
5 -21 dlv
0 -17 dlv
-5 -21 dlv
-8 -16 dlv
-8 -13 dlv
-9 -8 dlv
dle
2025 613 dlt
8 -17 dlv
4 -12 dlv
4 -21 dlv
0 -17 dlv
-4 -21 dlv
-4 -12 dlv
-8 -17 dlv
dle
1273 695 dlt
-9 8 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 8 dlv
dle
0 -87 1348 736 dls
1348 695 dlt
-8 8 dlv
-9 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
9 4 dlv
8 8 dlv
dle
1423 695 dlt
-4 8 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -8 dlv
4 -9 dlv
9 -4 dlv
21 -4 dlv
8 -4 dlv
4 -9 dlv
0 -4 dlv
-4 -8 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
1452 649 dlt
0 87 dlv
38 0 dlv
13 -4 dlv
4 -4 dlv
4 -8 dlv
0 -13 dlv
-4 -8 dlv
-4 -4 dlv
-13 -5 dlv
-38 0 dlv
dle
0 -58 1586 707 dls
1586 695 dlt
-8 8 dlv
-9 4 dlv
-12 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
9 -8 dlv
8 -4 dlv
12 0 dlv
9 4 dlv
8 8 dlv
dle
0 -58 1620 707 dls
1620 682 dlt
4 13 dlv
8 8 dlv
8 4 dlv
13 0 dlv
dle
0 -58 1720 707 dls
1720 695 dlt
-9 8 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 8 dlv
dle
0 -58 1753 707 dls
1753 690 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -41 dlv
dle
1799 690 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -41 dlv
dle
1908 753 dlt
-9 -8 dlv
-8 -13 dlv
-8 -16 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
8 -17 dlv
8 -12 dlv
9 -9 dlv
dle
1899 745 dlt
-8 -17 dlv
-4 -12 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
4 -12 dlv
8 -17 dlv
dle
1937 716 dlt
0 4 dlv
4 8 dlv
4 4 dlv
9 4 dlv
16 0 dlv
9 -4 dlv
4 -4 dlv
4 -8 dlv
0 -9 dlv
-4 -8 dlv
-8 -13 dlv
-42 -41 dlv
58 0 dlv
dle
2016 753 dlt
9 -8 dlv
8 -13 dlv
8 -16 dlv
5 -21 dlv
0 -17 dlv
-5 -21 dlv
-8 -17 dlv
-8 -12 dlv
-9 -9 dlv
dle
2025 745 dlt
8 -17 dlv
4 -12 dlv
4 -21 dlv
0 -17 dlv
-4 -21 dlv
-4 -12 dlv
-8 -17 dlv
dle
1282 826 dlt
-9 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-5 -12 dlv
0 -9 dlv
5 -12 dlv
8 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
9 9 dlv
dle
0 -88 1357 868 dls
1357 826 dlt
-9 9 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 9 dlv
dle
1432 826 dlt
-4 9 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -9 dlv
4 -8 dlv
9 -4 dlv
20 -4 dlv
9 -5 dlv
4 -8 dlv
0 -4 dlv
-4 -9 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 9 dlv
dle
1461 780 dlt
0 88 dlv
38 0 dlv
12 -4 dlv
5 -4 dlv
4 -9 dlv
0 -12 dlv
-4 -9 dlv
-5 -4 dlv
-12 -4 dlv
-38 0 dlv
dle
0 -59 1595 839 dls
1595 826 dlt
-8 9 dlv
-9 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
9 4 dlv
8 9 dlv
dle
0 -59 1628 839 dls
1628 814 dlt
4 12 dlv
9 9 dlv
8 4 dlv
13 0 dlv
dle
0 -59 1729 839 dls
1729 826 dlt
-9 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-5 -12 dlv
0 -9 dlv
5 -12 dlv
8 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
9 9 dlv
dle
0 -59 1762 839 dls
1762 822 dlt
13 13 dlv
8 4 dlv
12 0 dlv
9 -4 dlv
4 -13 dlv
0 -42 dlv
dle
1808 822 dlt
12 13 dlv
9 4 dlv
12 0 dlv
9 -4 dlv
4 -13 dlv
0 -42 dlv
dle
1917 885 dlt
-9 -9 dlv
-8 -12 dlv
-9 -17 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
9 -17 dlv
8 -13 dlv
9 -8 dlv
dle
1908 876 dlt
-8 -16 dlv
-4 -13 dlv
-5 -21 dlv
0 -16 dlv
5 -21 dlv
4 -13 dlv
8 -17 dlv
dle
1954 851 dlt
9 4 dlv
12 13 dlv
0 -88 dlv
dle
2013 885 dlt
8 -9 dlv
8 -12 dlv
9 -17 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-9 -17 dlv
-8 -13 dlv
-8 -8 dlv
dle
2021 876 dlt
8 -16 dlv
5 -13 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-5 -13 dlv
-8 -17 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2361 1002 dlt
-9 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-5 -13 dlv
0 -8 dlv
5 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
9 8 dlv
dle
0 -87 2436 1043 dls
2436 1002 dlt
-9 8 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 8 dlv
dle
2511 1002 dlt
-4 8 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -8 dlv
4 -9 dlv
9 -4 dlv
20 -4 dlv
9 -4 dlv
4 -9 dlv
0 -4 dlv
-4 -8 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 8 dlv
dle
2540 956 dlt
0 87 dlv
59 -87 dlv
0 87 dlv
dle
0 -58 2678 1014 dls
2678 1002 dlt
-8 8 dlv
-9 4 dlv
-12 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
9 -8 dlv
8 -4 dlv
12 0 dlv
9 4 dlv
8 8 dlv
dle
0 -58 2712 1014 dls
2712 998 dlt
12 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -42 dlv
dle
2757 998 dlt
13 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -42 dlv
dle
2833 989 dlt
50 0 dlv
0 9 dlv
-4 8 dlv
-5 4 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 8 dlv
dle
2941 1060 dlt
-8 -8 dlv
-8 -13 dlv
-9 -16 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
9 -17 dlv
8 -12 dlv
8 -9 dlv
dle
2933 1052 dlt
-8 -17 dlv
-5 -12 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
5 -12 dlv
8 -17 dlv
dle
2966 1060 dlt
9 -8 dlv
8 -13 dlv
8 -16 dlv
5 -21 dlv
0 -17 dlv
-5 -21 dlv
-8 -17 dlv
-8 -12 dlv
-9 -9 dlv
dle
2975 1052 dlt
8 -17 dlv
4 -12 dlv
4 -21 dlv
0 -17 dlv
-4 -21 dlv
-4 -12 dlv
-8 -17 dlv
dle
1000 902 749 slc
1000 902 749 sfc
1834 107 dlt
-8 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
9 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
0 -88 1909 149 dls
1909 107 dlt
-8 8 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-9 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
9 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 8 dlv
dle
1985 107 dlt
-5 8 dlv
-12 4 dlv
-13 0 dlv
-12 -4 dlv
-4 -8 dlv
4 -8 dlv
8 -5 dlv
21 -4 dlv
8 -4 dlv
5 -8 dlv
0 -5 dlv
-5 -8 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 8 dlv
dle
0 -88 2031 149 dls
59 0 2001 149 dls
2077 94 dlt
50 0 dlv
0 9 dlv
-4 8 dlv
-5 4 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -8 dlv
-4 -13 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
9 8 dlv
dle
0 -58 2156 119 dls
2156 94 dlt
4 13 dlv
8 8 dlv
9 4 dlv
12 0 dlv
dle
0 -58 2210 119 dls
2210 103 dlt
13 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -42 dlv
dle
2256 103 dlt
13 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -42 dlv
dle
2365 165 dlt
-9 -8 dlv
-8 -13 dlv
-8 -16 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
8 -16 dlv
8 -13 dlv
9 -8 dlv
dle
2356 157 dlt
-8 -17 dlv
-4 -12 dlv
-4 -21 dlv
0 -17 dlv
4 -21 dlv
4 -12 dlv
8 -17 dlv
dle
2398 144 dlt
-4 -25 dlv
0 25 dlv
4 5 dlv
4 -5 dlv
-8 -25 dlv
dle
2436 144 dlt
-4 -25 dlv
0 25 dlv
4 5 dlv
4 -5 dlv
-8 -25 dlv
dle
2524 136 dlt
-9 8 dlv
-12 5 dlv
-17 0 dlv
-13 -5 dlv
-8 -8 dlv
0 -8 dlv
4 -9 dlv
4 -4 dlv
9 -4 dlv
25 -8 dlv
8 -4 dlv
4 -5 dlv
5 -8 dlv
0 -13 dlv
-9 -8 dlv
-12 -4 dlv
-17 0 dlv
-13 4 dlv
-8 8 dlv
dle
2557 144 dlt
-4 -25 dlv
0 25 dlv
4 5 dlv
4 -5 dlv
-8 -25 dlv
dle
2595 144 dlt
-5 -25 dlv
0 25 dlv
5 5 dlv
4 -5 dlv
-9 -25 dlv
dle
2624 165 dlt
8 -8 dlv
9 -13 dlv
8 -16 dlv
4 -21 dlv
0 -17 dlv
-4 -21 dlv
-8 -16 dlv
-9 -13 dlv
-8 -8 dlv
dle
2632 157 dlt
9 -17 dlv
4 -12 dlv
4 -21 dlv
0 -17 dlv
-4 -21 dlv
-4 -12 dlv
-9 -17 dlv
dle
746 1282 dlt
-8 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-9 -9 dlv
-4 -12 dlv
0 -8 dlv
4 -13 dlv
9 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
8 8 dlv
dle
0 -88 822 1324 dls
822 1282 dlt
-9 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
8 -5 dlv
13 0 dlv
8 5 dlv
9 8 dlv
dle
897 1282 dlt
-4 9 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -9 dlv
4 -8 dlv
8 -4 dlv
21 -4 dlv
9 -4 dlv
4 -9 dlv
0 -4 dlv
-4 -8 dlv
-13 -5 dlv
-12 0 dlv
-13 5 dlv
-4 8 dlv
dle
0 -88 943 1324 dls
58 0 914 1324 dls
989 1270 dlt
50 0 dlv
0 8 dlv
-4 9 dlv
-4 4 dlv
-9 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -8 dlv
4 -13 dlv
8 -8 dlv
9 -5 dlv
12 0 dlv
9 5 dlv
8 8 dlv
dle
0 -59 1068 1295 dls
1068 1270 dlt
4 12 dlv
9 9 dlv
8 4 dlv
13 0 dlv
dle
0 -59 1122 1295 dls
1122 1278 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -42 dlv
dle
1168 1278 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -42 dlv
dle
1277 1341 dlt
-8 -8 dlv
-9 -13 dlv
-8 -17 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
8 -17 dlv
9 -12 dlv
8 -9 dlv
dle
1269 1333 dlt
-9 -17 dlv
-4 -13 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
4 -13 dlv
9 -16 dlv
dle
1310 1320 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
5 -4 dlv
-9 -25 dlv
dle
1348 1320 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
1381 1236 dlt
0 88 dlv
30 0 dlv
12 -4 dlv
9 -8 dlv
4 -9 dlv
4 -12 dlv
0 -21 dlv
-4 -13 dlv
-4 -8 dlv
-9 -8 dlv
-12 -5 dlv
-30 0 dlv
dle
1473 1320 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
1511 1320 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
1540 1341 dlt
9 -8 dlv
8 -13 dlv
8 -17 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-8 -17 dlv
-8 -12 dlv
-9 -9 dlv
dle
1549 1333 dlt
8 -17 dlv
4 -13 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-4 -13 dlv
-8 -16 dlv
dle
2431 826 dlt
-9 9 dlv
-8 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
8 4 dlv
9 9 dlv
dle
0 -88 2506 868 dls
2506 826 dlt
-8 9 dlv
-9 4 dlv
-12 0 dlv
-9 -4 dlv
-8 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
8 -9 dlv
9 -4 dlv
12 0 dlv
9 4 dlv
8 9 dlv
dle
2581 826 dlt
-4 9 dlv
-13 4 dlv
-12 0 dlv
-13 -4 dlv
-4 -9 dlv
4 -8 dlv
9 -4 dlv
21 -4 dlv
8 -5 dlv
4 -8 dlv
0 -4 dlv
-4 -9 dlv
-13 -4 dlv
-12 0 dlv
-13 4 dlv
-4 9 dlv
dle
0 -88 2627 868 dls
58 0 2598 868 dls
2673 814 dlt
50 0 dlv
0 8 dlv
-4 8 dlv
-4 5 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-9 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
9 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 9 dlv
dle
0 -59 2752 839 dls
2752 814 dlt
5 12 dlv
8 9 dlv
8 4 dlv
13 0 dlv
dle
0 -59 2807 839 dls
2807 822 dlt
12 13 dlv
9 4 dlv
12 0 dlv
9 -4 dlv
4 -13 dlv
0 -42 dlv
dle
2853 822 dlt
12 13 dlv
9 4 dlv
12 0 dlv
9 -4 dlv
4 -13 dlv
0 -42 dlv
dle
2961 885 dlt
-8 -9 dlv
-8 -12 dlv
-9 -17 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
9 -17 dlv
8 -13 dlv
8 -8 dlv
dle
2953 876 dlt
-8 -16 dlv
-5 -13 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
5 -13 dlv
8 -17 dlv
dle
2995 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
3032 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
5 -4 dlv
-9 -25 dlv
dle
3066 826 dlt
37 0 dlv
13 -4 dlv
4 -4 dlv
4 -8 dlv
0 -13 dlv
-4 -8 dlv
-4 -5 dlv
-13 -4 dlv
-37 0 dlv
0 88 dlv
37 0 dlv
13 -4 dlv
4 -4 dlv
4 -9 dlv
0 -8 dlv
-4 -8 dlv
-4 -5 dlv
-13 -4 dlv
dle
3158 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
3195 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
3225 885 dlt
8 -9 dlv
8 -12 dlv
9 -17 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-9 -17 dlv
-8 -13 dlv
-8 -8 dlv
dle
3233 876 dlt
8 -16 dlv
4 -13 dlv
5 -21 dlv
0 -16 dlv
-5 -21 dlv
-4 -13 dlv
-8 -17 dlv
dle
62 826 dlt
-8 9 dlv
-9 4 dlv
-12 0 dlv
-8 -4 dlv
-9 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
9 -9 dlv
8 -4 dlv
12 0 dlv
9 4 dlv
8 9 dlv
dle
0 -88 137 868 dls
137 826 dlt
-8 9 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-9 -9 dlv
-4 -12 dlv
0 -9 dlv
4 -12 dlv
9 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
8 9 dlv
dle
213 826 dlt
-5 9 dlv
-12 4 dlv
-13 0 dlv
-12 -4 dlv
-4 -9 dlv
4 -8 dlv
8 -4 dlv
21 -4 dlv
8 -5 dlv
5 -8 dlv
0 -4 dlv
-5 -9 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 9 dlv
dle
0 -88 259 868 dls
59 0 229 868 dls
304 814 dlt
51 0 dlv
0 8 dlv
-5 8 dlv
-4 5 dlv
-8 4 dlv
-13 0 dlv
-8 -4 dlv
-8 -9 dlv
-5 -12 dlv
0 -9 dlv
5 -12 dlv
8 -9 dlv
8 -4 dlv
13 0 dlv
8 4 dlv
9 9 dlv
dle
0 -59 384 839 dls
384 814 dlt
4 12 dlv
8 9 dlv
9 4 dlv
12 0 dlv
dle
0 -59 438 839 dls
438 822 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -42 dlv
dle
484 822 dlt
13 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -42 dlv
dle
593 885 dlt
-9 -9 dlv
-8 -12 dlv
-8 -17 dlv
-5 -21 dlv
0 -16 dlv
5 -21 dlv
8 -17 dlv
8 -13 dlv
9 -8 dlv
dle
584 876 dlt
-8 -16 dlv
-4 -13 dlv
-4 -21 dlv
0 -16 dlv
4 -21 dlv
4 -13 dlv
8 -17 dlv
dle
626 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
664 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
756 847 dlt
-5 8 dlv
-8 9 dlv
-8 4 dlv
-17 0 dlv
-8 -4 dlv
-9 -9 dlv
-4 -8 dlv
-4 -12 dlv
0 -21 dlv
4 -13 dlv
4 -8 dlv
9 -9 dlv
8 -4 dlv
17 0 dlv
8 4 dlv
8 9 dlv
5 8 dlv
0 13 dlv
-21 0 dlv
dle
789 864 dlt
-4 -25 dlv
0 25 dlv
4 4 dlv
4 -4 dlv
-8 -25 dlv
dle
827 864 dlt
-5 -25 dlv
0 25 dlv
5 4 dlv
4 -4 dlv
-9 -25 dlv
dle
856 885 dlt
8 -9 dlv
9 -12 dlv
8 -17 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-8 -17 dlv
-9 -13 dlv
-8 -8 dlv
dle
864 876 dlt
9 -16 dlv
4 -13 dlv
4 -21 dlv
0 -16 dlv
-4 -21 dlv
-4 -13 dlv
-9 -17 dlv
dle
0 800 400 slc
0 800 400 sfc
614 1316 982 386 dbu
0 351 1684 35 dls
0 351 1684 1000 dls
351 0 2298 736 dls
351 0 631 736 dls
1000 0 0 slc
1000 0 0 sfc
1609 509 dlt
-9 -8 dlv
-4 -13 dlv
0 -16 dlv
4 -13 dlv
9 -8 dlv
8 0 dlv
8 4 dlv
5 4 dlv
4 8 dlv
8 25 dlv
4 9 dlv
4 4 dlv
9 4 dlv
12 0 dlv
9 -8 dlv
4 -13 dlv
0 -16 dlv
-4 -13 dlv
-9 -8 dlv
dle
1684 867 dlt
-88 0 dlv
0 29 dlv
4 13 dlv
9 8 dlv
8 4 dlv
13 5 dlv
20 0 dlv
13 -5 dlv
8 -4 dlv
9 -8 dlv
4 -13 dlv
0 -29 dlv
dle
2166 738 dlt
37 0 dlv
13 -4 dlv
4 -4 dlv
4 -8 dlv
0 -13 dlv
-4 -8 dlv
-4 -4 dlv
-13 -4 dlv
-37 0 dlv
0 87 dlv
37 0 dlv
13 -4 dlv
4 -4 dlv
4 -8 dlv
0 -9 dlv
-4 -8 dlv
-4 -4 dlv
-13 -5 dlv
dle
1110 759 dlt
-4 9 dlv
-9 8 dlv
-8 4 dlv
-17 0 dlv
-8 -4 dlv
-8 -8 dlv
-5 -9 dlv
-4 -12 dlv
0 -21 dlv
4 -13 dlv
5 -8 dlv
8 -8 dlv
8 -4 dlv
17 0 dlv
8 4 dlv
9 8 dlv
4 8 dlv
0 13 dlv
-21 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1649 0 1719 70 dbs
1649 1315 1719 1386 dbs
2614 701 2684 772 dbs
596 701 666 772 dbs
gfs
%%Trailer
%%EOF
