%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
%%Page: cds 1
gis
0 0 2549 1484 clwin
ssls
0 0 0 slc
0 0 0 sfc
35 1458 dlt
0 -29 dlv
1 -7 dlv
2 -5 dlv
5 -1 dlv
11 0 dlv
5 1 dlv
2 5 dlv
1 7 dlv
0 29 dlv
dle
74 1423 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
136 1416 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 135 1438 dls
148 1416 dlt
0 42 dlv
21 0 dlv
4 -3 dlv
0 -4 dlv
0 -10 dlv
0 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
169 1434 dlt
4 -2 dlv
0 -5 dlv
0 -11 dlv
dle
188 1440 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
188 1420 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 30 211 1416 dls
211 1437 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
0 30 240 1416 dls
240 1437 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
272 1422 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
0 42 304 1416 dls
304 1437 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
336 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
356 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 368 1416 dls
368 1437 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 42 400 1416 dls
400 1432 dlt
4 0 dlv
13 14 dlv
dle
14 -16 404 1432 dls
430 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
450 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
35 1349 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
76 1349 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 102 1360 dls
25 0 119 1391 dls
0 -42 132 1391 dls
180 1349 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 179 1371 dls
195 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
195 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
25 0 218 1391 dls
0 -42 231 1391 dls
0 42 255 1349 dls
255 1370 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
287 1379 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 307 1379 dls
328 1349 dlt
0 42 dlv
28 -42 dlv
0 42 dlv
dle
373 1349 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
401 1379 dlt
11 -30 dlv
11 30 dlv
dle
453 1391 dlt
26 0 dlv
-19 -42 dlv
dle
500 1376 dlt
12 15 dlv
0 -42 dlv
dle
524 1391 dlt
26 0 dlv
-19 -42 dlv
dle
565 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
565 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
579 1376 dlt
12 15 dlv
0 -42 dlv
dle
604 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
643 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
643 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
658 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
695 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
741 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
786 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 777 1349 dls
815 1376 dlt
12 15 dlv
0 -42 dlv
dle
839 1357 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
35 1281 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
73 1323 dlt
0 -42 dlv
21 0 dlv
dle
115 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
25 0 148 1323 dls
0 -42 161 1323 dls
194 1288 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
0 42 232 1281 dls
245 1323 dlt
25 0 dlv
-26 -42 dlv
27 0 dlv
dle
307 1281 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 306 1303 dls
322 1305 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
322 1285 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
370 1315 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
387 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
399 1288 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
461 1315 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
20 30 482 1281 dls
20 -30 483 1311 dls
524 1308 dlt
12 15 dlv
0 -42 dlv
dle
548 1308 dlt
12 15 dlv
0 -42 dlv
dle
577 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
598 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 589 1281 dls
636 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 627 1281 dls
0 42 674 1281 dls
0 30 686 1281 dls
686 1302 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
738 1302 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 42 750 1281 dls
750 1302 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
782 1297 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
815 1287 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 1213 dlt
0 42 dlv
18 -42 dlv
18 43 dlv
0 -43 dlv
dle
83 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
103 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
116 1206 dlt
4 -3 dlv
11 0 dlv
3 3 dlv
2 5 dlv
0 32 dlv
dle
136 1234 dlt
-2 6 dlv
-3 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -9 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 6 dlv
dle
0 30 148 1213 dls
148 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 180 1213 dls
0 4 180 1251 dls
197 1213 dlt
0 37 dlv
2 4 dlv
4 1 dlv
3 0 dlv
dle
15 0 192 1240 dls
0 30 219 1213 dls
0 4 219 1251 dls
251 1234 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
263 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
283 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
19 0 295 1243 dls
300 1251 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
0 30 327 1213 dls
0 4 327 1251 dls
344 1213 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 30 372 1213 dls
372 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
407 1237 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
407 1217 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
430 1240 dlt
12 15 dlv
0 -42 dlv
dle
479 1247 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
516 1247 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
528 1220 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
590 1247 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
607 1213 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
619 1255 dlt
26 0 dlv
-19 -42 dlv
dle
657 1248 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
678 1236 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
28 42 694 1213 dls
28 -42 695 1255 dls
35 1188 dlt
0 -42 dlv
21 0 dlv
dle
0 30 68 1146 dls
0 4 68 1184 dls
0 42 80 1146 dls
80 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
0 30 113 1146 dls
113 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
142 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
162 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 174 1146 dls
174 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
203 1176 dlt
10 -30 dlv
10 30 dlv
dle
213 1146 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
238 1170 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
238 1150 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 270 1146 dls
282 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
302 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 42 314 1146 dls
314 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
347 1181 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
368 1169 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
63 1109 dlt
-1 6 dlv
-2 4 dlv
-5 1 dlv
-12 0 dlv
-5 -1 dlv
-2 -5 dlv
-1 -8 dlv
0 -14 dlv
1 -9 dlv
2 -4 dlv
5 -1 dlv
12 0 dlv
5 1 dlv
2 5 dlv
1 5 dlv
dle
75 1094 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 108 1078 dls
0 42 120 1078 dls
135 1102 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
135 1082 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 30 275 1078 dls
275 1099 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
307 1102 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
327 1091 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 339 1078 dls
339 1099 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
392 1099 dlt
-1 6 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 5 dlv
dle
0 -42 392 1120 dls
405 1112 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
35 1053 dlt
14 -42 dlv
15 42 dlv
dle
0 30 76 1011 dls
0 4 76 1049 dls
88 1027 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
121 1041 dlt
8 -30 dlv
7 30 dlv
8 -30 dlv
8 30 dlv
dle
167 1035 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
167 1015 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 280 1011 dls
292 1035 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
312 1024 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
324 1041 dlt
10 -30 dlv
10 30 dlv
dle
334 1011 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
361 1011 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
389 1041 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 409 1041 dls
19 0 421 1041 dls
426 1049 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
35 943 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
0 42 73 943 dls
90 943 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
19 0 118 973 dls
123 981 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
159 943 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 185 954 dls
0 30 202 943 dls
202 964 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
231 959 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
264 967 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
284 956 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
299 967 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
299 947 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
340 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
361 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
21 0 375 961 dls
410 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
431 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
452 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
465 977 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
501 985 dlt
26 0 dlv
-19 -42 dlv
dle
21 0 550 961 dls
585 985 dlt
26 0 dlv
-19 -42 dlv
dle
628 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
649 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 640 943 dls
678 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
699 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
715 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
736 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
752 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
791 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
828 977 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
845 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
857 985 dlt
26 0 dlv
-19 -42 dlv
dle
921 954 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
933 951 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
979 951 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
1021 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
1033 985 dlt
26 0 dlv
-19 -42 dlv
dle
1097 954 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
1109 970 dlt
12 15 dlv
0 -42 dlv
dle
1133 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
1154 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
29 572 383 808 clwin
1 fds
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <8000> fdf
1 fde
1 sfp
851 800 0 slc
851 800 0 sfc
38 681 333 799 dbf
118 295 38 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 41 649 dls
41 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
58 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
80 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
0 22 98 649 dls
0 22 104 649 dls
126 660 dlt
0 3 dlv
-3 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
0 -22 126 671 dls
0 15 132 649 dls
132 660 dlt
2 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -4 dlv
dle
148 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
158 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
164 664 dlt
5 -15 dlv
3 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 187 649 dls
0 3 187 668 dls
0 15 193 649 dls
193 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
211 645 dlt
2 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
221 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
3 2 dlv
0 3 dlv
dle
385 572 739 808 clwin
1000 1000 1000 slc
1000 1000 1000 sfc
118 296 393 681 dbu
0 0 0 slc
0 0 0 sfc
10 0 397 664 dls
399 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
413 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
10 15 431 649 dls
11 -15 431 664 dls
10 0 448 664 dls
451 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
481 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 481 671 dls
0 15 487 649 dls
487 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
502 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
3 -1 dlv
1 -2 dlv
0 -12 dlv
dle
513 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
519 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 541 649 dls
0 3 541 668 dls
0 15 548 649 dls
548 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
565 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
576 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
740 572 1094 808 clwin
1000 1000 1000 slc
549 549 651 sfc
749 681 1044 799 dbs
0 0 0 slc
0 0 0 sfc
763 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
772 649 dlt
-2 1 dlv
-1 4 dlv
0 6 dlv
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
dle
0 15 786 649 dls
786 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
10 0 803 664 dls
806 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
820 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
830 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
847 660 dlt
0 3 dlv
-3 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
10 0 853 664 dls
856 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
886 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 886 671 dls
0 15 892 649 dls
892 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
907 661 dlt
2 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
918 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -4 dlv
2 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
924 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 947 649 dls
0 3 947 668 dls
0 15 953 649 dls
953 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
970 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
981 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
1096 572 1450 808 clwin
2 fds
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 fde
2 sfp
149 549 420 slc
149 549 420 sfc
1104 681 1400 799 dbf
118 296 1104 681 dbu
0 0 0 slc
0 0 0 sfc
1108 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1118 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
1135 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
10 0 1141 664 dls
1144 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
0 15 1158 649 dls
0 3 1158 668 dls
1164 664 dlt
6 -15 dlv
6 15 dlv
dle
1182 657 dlt
11 0 dlv
0 2 dlv
0 4 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 2 dlv
dle
1215 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 -22 1215 671 dls
0 15 1222 649 dls
1222 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -4 dlv
dle
1237 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1247 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
1254 664 dlt
4 -15 dlv
3 15 dlv
5 -15 dlv
4 15 dlv
dle
0 15 1276 649 dls
0 3 1276 668 dls
0 15 1282 649 dls
1282 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1300 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
1 2 dlv
0 17 dlv
dle
1310 660 dlt
-1 3 dlv
-1 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 3 dlv
dle
1451 572 1805 808 clwin
3 fds
3 <0101> fdf
3 <0606> fdf
3 <0808> fdf
3 <3030> fdf
3 <4040> fdf
3 <8181> fdf
3 <0202> fdf
3 <0c0c> fdf
3 <1010> fdf
3 <6060> fdf
3 <8080> fdf
3 <0303> fdf
3 <0404> fdf
3 <1818> fdf
3 <2020> fdf
3 <c0c0> fdf
3 fde
3 sfp
902 122 51 slc
902 122 51 sfc
1460 681 1755 799 dbf
118 295 1460 681 dbu
0 0 0 slc
0 0 0 sfc
0 21 1463 643 dls
1463 660 dlt
1 3 dlv
2 1 dlv
6 0 dlv
1 -1 dlv
1 -4 dlv
0 -5 dlv
0 -4 dlv
-2 -1 dlv
-6 0 dlv
-2 1 dlv
-1 3 dlv
dle
1483 649 dlt
-1 1 dlv
-2 4 dlv
0 6 dlv
2 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -4 dlv
0 -5 dlv
0 -4 dlv
-2 -1 dlv
-6 0 dlv
dle
0 22 1498 649 dls
1504 664 dlt
5 -15 dlv
6 15 dlv
dle
1509 649 dlt
-1 -4 dlv
-1 -2 dlv
-1 0 dlv
dle
1521 663 dlt
6 8 dlv
0 -22 dlv
dle
1549 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 -22 1549 671 dls
0 15 1556 649 dls
1556 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -4 dlv
dle
1571 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1581 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
1588 664 dlt
4 -15 dlv
3 15 dlv
5 -15 dlv
4 15 dlv
dle
0 15 1610 649 dls
0 3 1610 668 dls
0 15 1616 649 dls
1616 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1634 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
1 2 dlv
0 17 dlv
dle
1644 660 dlt
-1 3 dlv
-1 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 3 dlv
dle
1807 572 2161 808 clwin
4 fds
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 fde
4 sfp
149 549 420 slc
0 800 400 sfc
1816 681 2111 799 dbf
118 295 1816 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 1819 649 dls
1819 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
0 21 1835 643 dls
1835 660 dlt
2 3 dlv
1 1 dlv
6 0 dlv
1 -1 dlv
1 -4 dlv
0 -5 dlv
0 -4 dlv
-2 -1 dlv
-6 0 dlv
-1 1 dlv
-2 3 dlv
dle
0 22 1853 649 dls
1859 664 dlt
0 -11 dlv
1 -3 dlv
2 -1 dlv
4 0 dlv
3 1 dlv
1 3 dlv
dle
0 -15 1870 664 dls
1876 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
0 2 dlv
0 3 dlv
0 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
0 -2 dlv
dle
1908 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 -22 1908 671 dls
0 15 1915 649 dls
1915 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
1930 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1940 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
1947 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 1969 649 dls
0 3 1969 668 dls
0 15 1976 649 dls
1976 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
1993 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
1 2 dlv
0 17 dlv
dle
2003 660 dlt
-1 3 dlv
-1 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 3 dlv
dle
2162 572 2517 808 clwin
5 fds
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 fde
5 sfp
549 549 651 slc
702 702 702 sfc
2171 681 2466 799 dbf
118 295 2171 681 dbu
0 0 0 slc
0 0 0 sfc
0 21 2174 643 dls
2174 660 dlt
1 3 dlv
2 1 dlv
6 0 dlv
1 -1 dlv
1 -4 dlv
0 -5 dlv
0 -4 dlv
-2 -1 dlv
-6 0 dlv
-2 1 dlv
-1 3 dlv
dle
0 21 2192 643 dls
2192 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
1 -1 dlv
2 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-6 0 dlv
-1 1 dlv
-1 3 dlv
dle
0 22 2209 649 dls
2215 664 dlt
0 -11 dlv
1 -3 dlv
2 -1 dlv
4 0 dlv
3 1 dlv
1 3 dlv
dle
0 -15 2226 664 dls
2232 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
0 2 dlv
0 3 dlv
0 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
0 -2 dlv
dle
2264 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-2 -4 dlv
0 -5 dlv
2 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 -22 2264 671 dls
0 15 2271 649 dls
2271 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
2286 661 dlt
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
2 -2 dlv
0 -12 dlv
dle
2297 655 dlt
-2 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
2 2 dlv
dle
2303 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 2325 649 dls
0 3 2325 668 dls
0 15 2332 649 dls
2332 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
2349 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
2 2 dlv
0 17 dlv
dle
2360 660 dlt
-2 3 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-2 -4 dlv
0 -5 dlv
2 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
29 334 383 571 clwin
6 fds
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 fde
6 sfp
0 0 1000 slc
0 0 1000 sfc
38 444 333 562 dbf
118 295 38 444 dbu
0 0 0 slc
0 0 0 sfc
0 16 41 411 dls
41 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
50 422 dlt
1 3 dlv
2 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
65 420 dlt
11 0 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
dle
9 0 83 427 dls
85 431 dlt
0 -17 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
dle
99 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
110 418 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 1 dlv
dle
0 22 116 411 dls
122 425 dlt
7 8 dlv
0 -22 dlv
dle
151 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
dle
0 -22 151 433 dls
0 16 157 411 dls
157 422 dlt
2 3 dlv
1 2 dlv
3 0 dlv
2 -2 dlv
1 -3 dlv
dle
172 424 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
183 418 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 1 dlv
dle
189 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
0 16 212 411 dls
0 2 212 431 dls
0 16 218 411 dls
218 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
0 -3 dlv
0 -11 dlv
dle
235 407 dlt
2 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
246 422 dlt
-1 3 dlv
-2 2 dlv
-6 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
385 334 739 571 clwin
0 0 2550 1484 clwin
1484 2549 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
nxp
%%Page: cds 1
0 1 1969 3297 clwin
0 1 1968 3297 clwin
0 0 1969 3300 clwin
1 fds
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <8000> fdf
1 fde
1 sfp
851 800 0 slc
851 800 0 sfc
ssls
0 1687 1411 3232 dbf
1545 1411 0 1687 dbu
2 fds
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 fde
2 sfp
149 549 420 slc
149 549 420 sfc
333 1801 dpb
333 2901 dpv
1005 2901 dpv
1005 1801 dpv
1093 1801 dpv
1093 2989 dpv
244 2989 dpv
244 1801 dpv
dpf
333 1801 dpb
333 2901 dpv
1005 2901 dpv
1005 1801 dpv
1093 1801 dpv
1093 2989 dpv
244 2989 dpv
244 1801 dpv
dpu
288 1801 dlt
0 1144 dlv
761 0 dlv
0 -1144 dlv
dle
428 722 dpb
866 722 dpv
866 1115 dpv
428 1115 dpv
dpf
428 722 dpb
866 722 dpv
866 1115 dpv
428 1115 dpv
dpu
438 0 428 919 dls
473 1900 866 2686 dbf
786 393 473 1900 dbu
199 1133 dpb
199 415 dpv
1093 415 dpv
1093 1133 dpv
1005 1133 dpv
1005 503 dpv
287 503 dpv
287 1133 dpv
dpf
199 1133 dpb
199 415 dpv
1093 415 dpv
1093 1133 dpv
1005 1133 dpv
1005 503 dpv
287 503 dpv
287 1133 dpv
dpu
243 1133 dlt
0 -674 dlv
806 0 dlv
0 674 dlv
dle
3 fds
3 <0101> fdf
3 <0606> fdf
3 <0808> fdf
3 <3030> fdf
3 <4040> fdf
3 <8181> fdf
3 <0202> fdf
3 <0c0c> fdf
3 <1010> fdf
3 <6060> fdf
3 <8080> fdf
3 <0303> fdf
3 <0404> fdf
3 <1818> fdf
3 <2020> fdf
3 <c0c0> fdf
3 fde
3 sfp
902 122 51 slc
902 122 51 sfc
573 2758 dpb
573 636 dpv
609 636 dpv
609 2758 dpv
dpf
573 2758 dpb
573 636 dpv
609 636 dpv
609 2758 dpv
dpu
0 -2122 591 2758 dls
733 2758 dpb
733 636 dpv
768 636 dpv
768 2758 dpv
dpf
733 2758 dpb
733 636 dpv
768 636 dpv
768 2758 dpv
dpu
0 -2122 750 2758 dls
550 1406 632 1489 dbf
83 82 550 1406 dbu
709 1410 792 1493 dbf
83 83 709 1410 dbu
4 fds
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 fde
4 sfp
149 549 420 slc
0 800 400 sfc
401 1732 dpb
401 2832 dpv
936 2832 dpv
936 1732 dpv
1162 1732 dpv
1162 3058 dpv
175 3058 dpv
175 1732 dpv
dpf
401 1732 dpb
401 2832 dpv
936 2832 dpv
936 1732 dpv
1162 1732 dpv
1162 3058 dpv
175 3058 dpv
175 1732 dpv
dpu
288 1732 dlt
0 1213 dlv
761 0 dlv
0 -1213 dlv
dle
357 652 935 1202 dbf
550 578 357 652 dbu
5 fds
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 fde
5 sfp
549 549 651 slc
702 702 702 sfc
402 1732 935 2754 dbf
1022 533 402 1732 dbu
130 1202 dpb
130 346 dpv
1162 346 dpv
1162 1202 dpv
936 1202 dpv
936 572 dpv
356 572 dpv
356 1202 dpv
dpf
130 1202 dpb
130 346 dpv
1162 346 dpv
1162 1202 dpv
936 1202 dpv
936 572 dpv
356 572 dpv
356 1202 dpv
dpu
243 1202 dlt
0 -743 dlv
806 0 dlv
0 743 dlv
dle
1000 1000 1000 slc
549 549 651 sfc
493 2923 536 2967 dbs
375 2923 418 2967 dbs
831 2923 874 2967 dbs
929 2923 972 2967 dbs
733 2923 776 2967 dbs
613 2923 656 2967 dbs
267 2424 310 2467 dbs
267 2817 310 2861 dbs
267 2916 310 2959 dbs
491 742 534 785 dbs
803 746 847 789 dbs
491 1041 534 1084 dbs
222 439 265 483 dbs
499 2373 542 2416 dbs
1025 1029 1069 1072 dbs
499 2126 542 2169 dbs
799 1976 843 2019 dbs
803 1045 847 1088 dbs
799 2126 843 2169 dbs
799 2473 843 2517 dbs
642 2245 685 2289 dbs
642 2126 685 2169 dbs
799 2257 843 2300 dbs
799 2373 843 2416 dbs
499 2245 542 2289 dbs
642 2479 685 2523 dbs
642 2373 685 2416 dbs
491 942 534 986 dbs
803 946 847 990 dbs
803 846 847 889 dbs
491 840 534 883 dbs
499 2479 542 2523 dbs
799 2593 843 2637 dbs
499 2589 542 2633 dbs
1027 2424 1071 2467 dbs
499 1972 542 2015 dbs
1027 2817 1071 2861 dbs
1027 2916 1071 2959 dbs
1027 2719 1071 2762 dbs
1027 2621 1071 2664 dbs
1027 2523 1071 2566 dbs
1027 1933 1071 1976 dbs
1027 2031 1071 2074 dbs
1027 2129 1071 2173 dbs
1027 2326 1071 2369 dbs
1027 2228 1071 2271 dbs
1027 1835 1071 1878 dbs
624 435 668 479 dbs
725 435 768 479 dbs
921 435 964 479 dbs
823 435 866 479 dbs
418 435 461 479 dbs
516 435 560 479 dbs
320 435 363 479 dbs
1025 832 1069 876 dbs
1025 931 1069 974 dbs
1025 734 1069 777 dbs
222 832 265 876 dbs
1025 439 1069 483 dbs
222 931 265 974 dbs
222 734 265 777 dbs
1025 636 1069 679 dbs
1025 538 1069 581 dbs
222 636 265 679 dbs
267 1835 310 1878 dbs
222 538 265 581 dbs
267 2228 310 2271 dbs
267 2326 310 2369 dbs
222 1037 265 1080 dbs
642 1972 685 2015 dbs
267 2129 310 2173 dbs
267 2031 310 2074 dbs
642 2589 685 2633 dbs
267 1933 310 1976 dbs
267 2523 310 2566 dbs
267 2621 310 2664 dbs
267 2719 310 2762 dbs
569 1426 613 1469 dbs
729 1430 772 1473 dbs
6 fds
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 fde
6 sfp
0 0 1000 slc
0 0 1000 sfc
788 2992 dpb
788 1776 dpv
854 1776 dpv
854 2992 dpv
dpf
788 2992 dpb
788 1776 dpv
854 1776 dpv
854 2992 dpv
dpu
0 -1216 821 2992 dls
630 1619 dpb
1373 1619 dpv
1373 1286 dpv
792 1286 dpv
792 1220 dpv
1440 1220 dpv
1440 1685 dpv
630 1685 dpv
dpf
630 1619 dpb
1373 1619 dpv
1373 1286 dpv
792 1286 dpv
792 1220 dpv
1440 1220 dpv
1440 1685 dpv
630 1685 dpv
dpu
630 1652 dlt
777 0 dlv
0 -399 dlv
-615 0 dlv
dle
915 1485 dpb
717 1485 dpv
717 1418 dpv
915 1418 dpv
dpf
915 1485 dpb
717 1485 dpv
717 1418 dpv
915 1418 dpv
dpu
-198 0 915 1451 dls
613 1481 dpb
432 1481 dpv
432 1414 dpv
613 1414 dpv
dpf
613 1481 dpb
432 1481 dpv
432 1414 dpv
613 1414 dpv
dpu
-181 0 613 1448 dls
322 1799 dpb
322 2912 dpv
1016 2912 dpv
1016 1803 dpv
1082 1803 dpv
1082 2978 dpv
255 2978 dpv
255 1799 dpv
dpf
322 1799 dpb
322 2912 dpv
1016 2912 dpv
1016 1803 dpv
1082 1803 dpv
1082 2978 dpv
255 2978 dpv
255 1799 dpv
dpu
288 1799 dlt
0 1146 dlv
761 0 dlv
0 -1142 dlv
dle
487 2992 dpb
487 1776 dpv
554 1776 dpv
554 2992 dpv
dpf
487 2992 dpb
487 1776 dpv
554 1776 dpv
554 2992 dpv
dpu
0 -1216 520 2992 dls
630 2646 dpb
630 1585 dpv
697 1585 dpv
697 2646 dpv
dpf
630 2646 dpb
630 1585 dpv
697 1585 dpv
697 2646 dpv
dpu
0 -1061 664 2646 dls
792 1296 dpb
792 720 dpv
858 720 dpv
858 1296 dpv
dpf
792 1296 dpb
792 720 dpv
858 720 dpv
858 1296 dpv
dpu
0 -576 825 1296 dls
209 1104 dpb
209 423 dpv
1081 423 dpv
1081 1104 dpv
1013 1104 dpv
1013 491 dpv
278 491 dpv
278 1104 dpv
dpf
209 1104 dpb
209 423 dpv
1081 423 dpv
1081 1104 dpv
1013 1104 dpv
1013 491 dpv
278 491 dpv
278 1104 dpv
dpu
243 1104 dlt
0 -647 dlv
804 0 dlv
0 647 dlv
dle
479 1098 dpb
479 430 dpv
546 430 dpv
546 1098 dpv
dpf
479 1098 dpb
479 430 dpv
546 430 dpv
546 1098 dpv
dpu
0 -668 512 1098 dls
478 434 523 480 dbf
46 45 478 434 dbu
1355 1629 1400 1675 dbf
46 45 1355 1629 dbu
848 1437 893 1482 dbf
45 45 848 1437 dbu
445 1427 490 1472 dbf
45 45 445 1427 dbu
555 2930 600 2976 dbf
46 45 555 2930 dbu
558 1414 624 1481 dbf
67 66 558 1414 dbu
717 1418 784 1485 dbf
67 67 717 1418 dbu
549 549 651 slc
549 549 651 sfc
0 3299 642 0 dls
1968 0 0 1383 dls
gfs
%%Trailer
%%EOF
