%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
%%Page: cds 1
gis
0 0 2549 1484 clwin
ssls
0 0 0 slc
0 0 0 sfc
35 1458 dlt
0 -29 dlv
1 -7 dlv
2 -5 dlv
5 -1 dlv
11 0 dlv
5 1 dlv
2 5 dlv
1 7 dlv
0 29 dlv
dle
74 1423 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
136 1416 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 135 1438 dls
148 1416 dlt
0 42 dlv
21 0 dlv
4 -3 dlv
0 -4 dlv
0 -10 dlv
0 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
169 1434 dlt
4 -2 dlv
0 -5 dlv
0 -11 dlv
dle
188 1440 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
188 1420 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
212 1409 dlt
4 -3 dlv
11 0 dlv
3 3 dlv
2 5 dlv
0 32 dlv
dle
232 1437 dlt
-2 6 dlv
-3 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -9 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 6 dlv
dle
264 1437 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
276 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
296 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
308 1422 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
360 1437 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 30 372 1416 dls
0 4 372 1454 dls
384 1440 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
404 1429 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 416 1416 dls
416 1437 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
35 1349 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
76 1349 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 102 1360 dls
25 0 119 1391 dls
0 -42 132 1391 dls
180 1349 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 179 1371 dls
195 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
195 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
218 1349 dlt
0 42 dlv
18 -42 dlv
18 43 dlv
0 -43 dlv
dle
271 1349 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 30 299 1349 dls
299 1370 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
340 1349 dlt
0 42 dlv
28 -42 dlv
0 42 dlv
dle
385 1349 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
413 1379 dlt
11 -30 dlv
11 30 dlv
dle
456 1376 dlt
12 15 dlv
0 -42 dlv
dle
500 1372 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
535 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 526 1349 dls
573 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 564 1349 dls
605 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
605 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
620 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
656 1357 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
696 1373 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
696 1353 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
710 1376 dlt
12 15 dlv
0 -42 dlv
dle
760 1360 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
782 1383 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
827 1349 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 818 1349 dls
856 1376 dlt
12 15 dlv
0 -42 dlv
dle
880 1357 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
35 1281 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
73 1323 dlt
0 -42 dlv
21 0 dlv
dle
115 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
11 0 dlv
6 -1 dlv
3 -5 dlv
1 -8 dlv
0 -14 dlv
-1 -8 dlv
-3 -5 dlv
-6 -1 dlv
-11 0 dlv
dle
25 0 148 1323 dls
0 -42 161 1323 dls
194 1288 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 4 dlv
0 7 dlv
0 4 dlv
-4 3 dlv
-18 2 dlv
-2 3 dlv
-1 4 dlv
0 5 dlv
1 4 dlv
3 3 dlv
16 0 dlv
4 -3 dlv
1 -4 dlv
dle
0 42 232 1281 dls
245 1323 dlt
25 0 dlv
-26 -42 dlv
27 0 dlv
dle
307 1281 dlt
-24 0 dlv
0 42 dlv
24 0 dlv
dle
-23 0 306 1303 dls
322 1305 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
322 1285 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
371 1292 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
388 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
400 1288 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
438 1315 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
20 30 483 1281 dls
20 -30 484 1311 dls
525 1308 dlt
12 15 dlv
0 -42 dlv
dle
549 1308 dlt
12 15 dlv
0 -42 dlv
dle
578 1281 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
599 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 590 1281 dls
637 1281 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 628 1281 dls
0 42 675 1281 dls
0 30 687 1281 dls
687 1302 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
739 1302 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
0 42 751 1281 dls
751 1302 dlt
2 6 dlv
3 3 dlv
9 0 dlv
4 -3 dlv
2 -6 dlv
0 -21 dlv
dle
783 1297 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
816 1287 dlt
2 -5 dlv
3 -1 dlv
10 0 dlv
4 1 dlv
1 3 dlv
0 7 dlv
-1 3 dlv
-4 2 dlv
-10 0 dlv
-3 1 dlv
-2 3 dlv
0 5 dlv
2 3 dlv
3 2 dlv
10 0 dlv
4 -2 dlv
1 -4 dlv
dle
35 1213 dlt
0 42 dlv
18 -42 dlv
18 43 dlv
0 -43 dlv
dle
83 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
103 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
116 1206 dlt
4 -3 dlv
11 0 dlv
3 3 dlv
2 5 dlv
0 32 dlv
dle
136 1234 dlt
-2 6 dlv
-3 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -9 dlv
2 -7 dlv
3 -3 dlv
11 0 dlv
4 3 dlv
1 6 dlv
dle
0 30 148 1213 dls
148 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
0 30 180 1213 dls
0 4 180 1251 dls
197 1213 dlt
0 37 dlv
2 4 dlv
4 1 dlv
3 0 dlv
dle
15 0 192 1240 dls
0 30 219 1213 dls
0 4 219 1251 dls
251 1234 dlt
-1 6 dlv
-4 3 dlv
-10 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
10 0 dlv
4 3 dlv
1 5 dlv
dle
263 1237 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
283 1226 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
19 0 295 1243 dls
300 1251 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
0 30 327 1213 dls
0 4 327 1251 dls
344 1213 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
0 30 372 1213 dls
372 1234 dlt
2 6 dlv
3 3 dlv
10 0 dlv
4 -3 dlv
1 -6 dlv
0 -21 dlv
dle
407 1237 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
407 1217 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
430 1221 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
467 1221 dlt
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 26 dlv
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -6 dlv
3 -3 dlv
16 0 dlv
4 3 dlv
1 6 dlv
dle
530 1224 dlt
-26 0 dlv
23 31 dlv
0 -42 dlv
dle
542 1220 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
584 1213 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
596 1240 dlt
12 15 dlv
0 -42 dlv
dle
640 1236 dlt
5 -3 dlv
0 -4 dlv
0 -9 dlv
0 -4 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 4 dlv
0 9 dlv
1 4 dlv
4 3 dlv
15 0 dlv
4 2 dlv
1 5 dlv
0 5 dlv
-1 4 dlv
-4 3 dlv
-15 0 dlv
-3 -3 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
3 -3 dlv
dle
28 42 657 1213 dls
28 -42 658 1255 dls
35 1188 dlt
0 -42 dlv
21 0 dlv
dle
0 30 68 1146 dls
0 4 68 1184 dls
0 42 80 1146 dls
80 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
0 30 113 1146 dls
113 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
142 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
162 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 30 174 1146 dls
174 1167 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
203 1176 dlt
10 -30 dlv
10 30 dlv
dle
213 1146 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
238 1170 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
238 1150 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 270 1146 dls
282 1170 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
302 1159 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
0 42 314 1146 dls
314 1167 dlt
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
-3 3 dlv
-2 5 dlv
dle
347 1181 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
368 1169 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
63 1109 dlt
-1 6 dlv
-2 4 dlv
-5 1 dlv
-12 0 dlv
-5 -1 dlv
-2 -5 dlv
-1 -8 dlv
0 -14 dlv
1 -9 dlv
2 -4 dlv
5 -1 dlv
12 0 dlv
5 1 dlv
2 5 dlv
1 5 dlv
dle
75 1094 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
0 42 108 1078 dls
0 42 120 1078 dls
135 1102 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
135 1082 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
275 1078 dlt
0 42 dlv
28 -42 dlv
0 42 dlv
dle
315 1078 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 341 1089 dls
358 1078 dlt
0 42 dlv
28 -42 dlv
0 42 dlv
dle
398 1078 dlt
0 42 dlv
20 0 dlv
5 -1 dlv
3 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
-20 0 dlv
dle
440 1112 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
35 1053 dlt
14 -42 dlv
15 42 dlv
dle
0 30 76 1011 dls
0 4 76 1049 dls
88 1027 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
121 1041 dlt
8 -30 dlv
7 30 dlv
8 -30 dlv
8 30 dlv
dle
167 1035 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
167 1015 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
0 42 280 1011 dls
292 1035 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
312 1024 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
324 1041 dlt
10 -30 dlv
10 30 dlv
dle
334 1011 dlt
-2 -6 dlv
-3 -4 dlv
-2 0 dlv
dle
361 1011 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
389 1041 dlt
0 -21 dlv
2 -6 dlv
3 -3 dlv
9 0 dlv
4 3 dlv
2 5 dlv
dle
0 -30 409 1041 dls
19 0 421 1041 dls
426 1049 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
35 943 dlt
0 42 dlv
21 0 dlv
4 -2 dlv
1 -5 dlv
0 -10 dlv
-1 -4 dlv
-4 -3 dlv
-21 0 dlv
dle
0 42 73 943 dls
90 943 dlt
-3 3 dlv
-2 7 dlv
0 11 dlv
2 6 dlv
3 3 dlv
11 0 dlv
4 -3 dlv
1 -7 dlv
0 -10 dlv
-1 -7 dlv
-4 -3 dlv
-11 0 dlv
dle
19 0 118 973 dls
123 981 dlt
0 -32 dlv
2 -5 dlv
4 -1 dlv
3 0 dlv
4 1 dlv
2 5 dlv
0 5 dlv
dle
159 943 dlt
15 42 dlv
16 -42 dlv
dle
-22 0 185 954 dls
0 30 202 943 dls
202 964 dlt
3 6 dlv
3 3 dlv
6 0 dlv
3 -3 dlv
2 -7 dlv
dle
231 959 dlt
21 0 dlv
0 4 dlv
-1 7 dlv
-4 3 dlv
-11 0 dlv
-3 -3 dlv
-2 -7 dlv
0 -10 dlv
2 -7 dlv
3 -3 dlv
12 0 dlv
3 4 dlv
dle
264 967 dlt
2 4 dlv
3 2 dlv
9 0 dlv
4 -2 dlv
2 -4 dlv
0 -24 dlv
dle
284 956 dlt
-2 2 dlv
-3 2 dlv
-11 0 dlv
-2 -2 dlv
-2 -2 dlv
0 -9 dlv
2 -3 dlv
2 -1 dlv
11 0 dlv
3 1 dlv
2 3 dlv
dle
299 967 dlt
0 4 dlv
2 0 dlv
0 -4 dlv
-2 0 dlv
dle
299 947 dlt
2 0 dlv
0 -4 dlv
-2 0 dlv
0 4 dlv
dle
340 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
361 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
21 0 375 961 dls
410 970 dlt
12 15 dlv
0 -42 dlv
dle
434 970 dlt
12 15 dlv
0 -42 dlv
dle
463 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
500 977 dlt
0 5 dlv
-4 3 dlv
-17 0 dlv
-3 -3 dlv
-1 -5 dlv
0 -26 dlv
1 -5 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 5 dlv
0 8 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -6 dlv
dle
512 985 dlt
26 0 dlv
-19 -42 dlv
dle
21 0 561 961 dls
596 970 dlt
12 15 dlv
0 -42 dlv
dle
620 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
641 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
662 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
683 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 674 943 dls
713 977 dlt
1 5 dlv
3 3 dlv
15 0 dlv
4 -3 dlv
1 -5 dlv
0 -6 dlv
-1 -5 dlv
-4 -3 dlv
-15 -3 dlv
-3 -3 dlv
-1 -5 dlv
-1 -9 dlv
25 0 dlv
dle
749 978 dlt
1 4 dlv
3 3 dlv
17 0 dlv
4 -3 dlv
0 -4 dlv
0 -5 dlv
0 -5 dlv
-4 -2 dlv
-12 0 dlv
dle
770 966 dlt
4 -3 dlv
0 -6 dlv
0 -6 dlv
0 -5 dlv
-4 -3 dlv
-17 0 dlv
-3 3 dlv
-1 5 dlv
dle
786 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
825 985 dlt
-6 -1 dlv
-2 -4 dlv
-1 -9 dlv
0 -14 dlv
1 -8 dlv
2 -5 dlv
6 -1 dlv
dle
21 0 839 961 dls
883 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 874 943 dls
917 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
929 970 dlt
12 15 dlv
0 -42 dlv
dle
953 970 dlt
12 15 dlv
0 -42 dlv
dle
977 970 dlt
12 15 dlv
0 -42 dlv
dle
1010 970 dlt
12 15 dlv
0 -42 dlv
dle
1034 950 dlt
1 -4 dlv
3 -3 dlv
17 0 dlv
4 3 dlv
0 6 dlv
0 11 dlv
0 5 dlv
-4 3 dlv
-16 0 dlv
-3 -3 dlv
-2 -4 dlv
0 21 dlv
25 0 dlv
dle
1076 943 dlt
-2 0 dlv
0 4 dlv
2 0 dlv
0 -4 dlv
dle
1097 943 dlt
-6 1 dlv
-2 5 dlv
-1 8 dlv
0 14 dlv
1 9 dlv
2 4 dlv
6 1 dlv
9 0 dlv
5 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-5 -1 dlv
-10 0 dlv
dle
26 42 1088 943 dls
1126 985 dlt
26 0 dlv
-19 -42 dlv
dle
1164 970 dlt
12 15 dlv
0 -42 dlv
dle
1188 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
1209 985 dlt
6 -1 dlv
2 -4 dlv
1 -9 dlv
0 -14 dlv
-1 -8 dlv
-2 -5 dlv
-6 -1 dlv
dle
29 572 383 808 clwin
1000 1000 1000 slc
1000 1000 1000 sfc
118 295 38 681 dbu
0 0 0 slc
0 0 0 sfc
10 0 41 664 dls
44 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
58 657 dlt
11 0 dlv
0 2 dlv
-1 4 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
7 0 dlv
1 2 dlv
dle
11 15 75 649 dls
10 -15 76 664 dls
10 0 92 664 dls
95 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
125 660 dlt
0 3 dlv
-3 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
0 -22 125 671 dls
0 15 131 649 dls
131 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
147 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
157 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
163 664 dlt
5 -15 dlv
3 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 186 649 dls
0 3 186 668 dls
0 15 192 649 dls
192 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
210 645 dlt
2 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
220 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
3 2 dlv
0 3 dlv
dle
385 572 739 808 clwin
1 fds
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 <0000> fdf
1 <1111> fdf
1 <0000> fdf
1 <4444> fdf
1 fde
1 sfp
0 0 1000 slc
0 0 1000 sfc
393 681 689 799 dbf
118 296 393 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 397 649 dls
397 660 dlt
1 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -3 dlv
0 -11 dlv
dle
405 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -3 dlv
0 -11 dlv
dle
421 657 dlt
11 0 dlv
0 2 dlv
-1 4 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
7 0 dlv
1 2 dlv
dle
10 0 438 664 dls
441 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
455 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
465 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
0 22 472 649 dls
478 663 dlt
6 8 dlv
0 -22 dlv
dle
506 660 dlt
0 3 dlv
-2 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
6 0 dlv
2 1 dlv
0 3 dlv
dle
0 -22 506 671 dls
0 15 513 649 dls
513 660 dlt
1 3 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
2 -4 dlv
dle
528 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
538 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
545 664 dlt
4 -15 dlv
3 15 dlv
5 -15 dlv
4 15 dlv
dle
0 15 567 649 dls
0 3 567 668 dls
0 15 573 649 dls
573 660 dlt
2 3 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
591 645 dlt
2 -2 dlv
6 0 dlv
1 2 dlv
1 2 dlv
0 17 dlv
dle
601 660 dlt
-1 3 dlv
-1 1 dlv
-6 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
0 3 dlv
dle
740 572 1094 808 clwin
1000 1000 1000 slc
549 549 651 sfc
749 681 1044 799 dbs
0 0 0 slc
0 0 0 sfc
763 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
772 649 dlt
-2 1 dlv
-1 4 dlv
0 6 dlv
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
dle
0 15 786 649 dls
786 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
10 0 803 664 dls
806 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 2 dlv
dle
820 661 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
830 655 dlt
-1 1 dlv
-1 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
1 0 dlv
1 2 dlv
dle
847 660 dlt
0 3 dlv
-3 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
10 0 853 664 dls
856 668 dlt
0 -16 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
886 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 886 671 dls
0 15 892 649 dls
892 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
907 661 dlt
2 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
918 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -4 dlv
2 -2 dlv
1 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
924 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 947 649 dls
0 3 947 668 dls
0 15 953 649 dls
953 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
970 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
981 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
1096 572 1450 808 clwin
2 fds
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 <1111> fdf
2 <2222> fdf
2 <4444> fdf
2 <8888> fdf
2 fde
2 sfp
549 549 651 slc
702 702 702 sfc
1104 681 1400 799 dbf
118 296 1104 681 dbu
0 0 0 slc
0 0 0 sfc
0 21 1108 643 dls
1108 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-6 0 dlv
-1 1 dlv
-1 3 dlv
dle
0 21 1125 643 dls
1125 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
-2 1 dlv
-1 3 dlv
dle
0 22 1142 649 dls
1149 664 dlt
0 -11 dlv
1 -3 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -15 1159 664 dls
1165 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
dle
1198 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 1198 671 dls
0 15 1204 649 dls
1204 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
1219 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1230 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
1236 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 1259 649 dls
0 3 1259 668 dls
0 15 1265 649 dls
1265 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1282 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
1293 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
1451 572 1805 808 clwin
3 fds
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 <8888> fdf
3 <4444> fdf
3 <2222> fdf
3 <1111> fdf
3 fde
3 sfp
149 549 420 slc
0 800 400 sfc
1460 681 1755 799 dbf
118 295 1460 681 dbu
0 0 0 slc
0 0 0 sfc
0 15 1463 649 dls
1463 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
0 21 1480 643 dls
1480 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
-2 1 dlv
-1 3 dlv
dle
0 22 1497 649 dls
1504 664 dlt
0 -11 dlv
1 -3 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -15 1514 664 dls
1520 652 dlt
1 -3 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 1 dlv
-5 0 dlv
-2 0 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
dle
1553 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 1553 671 dls
0 15 1559 649 dls
1559 660 dlt
2 3 dlv
1 1 dlv
4 0 dlv
1 -1 dlv
1 -4 dlv
dle
1574 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1585 655 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
2 0 dlv
5 0 dlv
2 0 dlv
1 2 dlv
dle
1591 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
5 15 dlv
dle
0 15 1614 649 dls
0 3 1614 668 dls
0 15 1620 649 dls
1620 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
1637 645 dlt
3 -2 dlv
5 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
1648 660 dlt
-1 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
1 3 dlv
dle
1807 572 2161 808 clwin
4 fds
4 <0101> fdf
4 <0606> fdf
4 <0808> fdf
4 <3030> fdf
4 <4040> fdf
4 <8181> fdf
4 <0202> fdf
4 <0c0c> fdf
4 <1010> fdf
4 <6060> fdf
4 <8080> fdf
4 <0303> fdf
4 <0404> fdf
4 <1818> fdf
4 <2020> fdf
4 <c0c0> fdf
4 fde
4 sfp
902 122 51 slc
902 122 51 sfc
1816 681 2111 799 dbf
118 295 1816 681 dbu
0 0 0 slc
0 0 0 sfc
0 21 1819 643 dls
1819 660 dlt
1 3 dlv
1 1 dlv
6 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-6 0 dlv
-1 1 dlv
-1 3 dlv
dle
1839 649 dlt
-2 1 dlv
-1 4 dlv
0 6 dlv
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -4 dlv
0 -5 dlv
-1 -4 dlv
-2 -1 dlv
-5 0 dlv
dle
0 22 1853 649 dls
1860 664 dlt
5 -15 dlv
5 15 dlv
dle
1865 649 dlt
-1 -4 dlv
-2 -2 dlv
-1 0 dlv
dle
1876 663 dlt
7 8 dlv
0 -22 dlv
dle
1905 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 1905 671 dls
0 15 1911 649 dls
1911 660 dlt
2 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
1926 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
1937 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
1943 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 1966 649 dls
0 3 1966 668 dls
0 15 1972 649 dls
1972 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
0 -3 dlv
0 -11 dlv
dle
1989 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
2000 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
2162 572 2517 808 clwin
5 fds
5 <0000> fdf
5 <0000> fdf
5 <f1f1> fdf
5 <1111> fdf
5 <1111> fdf
5 <1f1f> fdf
5 <0000> fdf
5 <0000> fdf
5 <0000> fdf
5 <0000> fdf
5 <f1f1> fdf
5 <1111> fdf
5 <1111> fdf
5 <1f1f> fdf
5 <0000> fdf
5 <0000> fdf
5 fde
5 sfp
149 549 420 slc
149 549 420 sfc
2171 681 2466 799 dbf
118 295 2171 681 dbu
0 0 0 slc
0 0 0 sfc
2174 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
2185 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
2201 660 dlt
0 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
0 3 dlv
dle
10 0 2208 664 dls
2210 668 dlt
0 -16 dlv
1 -3 dlv
3 0 dlv
1 0 dlv
2 0 dlv
1 3 dlv
0 2 dlv
dle
0 15 2225 649 dls
0 3 2225 668 dls
2231 664 dlt
6 -15 dlv
5 15 dlv
dle
2249 657 dlt
11 0 dlv
0 2 dlv
-1 4 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
7 0 dlv
1 2 dlv
dle
2282 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -4 dlv
1 -1 dlv
6 0 dlv
2 1 dlv
1 3 dlv
dle
0 -22 2282 671 dls
0 15 2288 649 dls
2288 660 dlt
2 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
dle
2303 661 dlt
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -12 dlv
dle
2314 655 dlt
-1 1 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -4 dlv
1 -2 dlv
1 0 dlv
6 0 dlv
2 0 dlv
1 2 dlv
dle
2320 664 dlt
4 -15 dlv
4 15 dlv
4 -15 dlv
4 15 dlv
dle
0 15 2343 649 dls
0 3 2343 668 dls
0 15 2349 649 dls
2349 660 dlt
1 3 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
2366 645 dlt
2 -2 dlv
6 0 dlv
2 2 dlv
1 2 dlv
0 17 dlv
dle
2377 660 dlt
-1 3 dlv
-2 1 dlv
-6 0 dlv
-1 -1 dlv
-1 -4 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
6 0 dlv
2 2 dlv
1 3 dlv
dle
29 334 383 571 clwin
6 fds
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <0000> fdf
6 <8000> fdf
6 fde
6 sfp
851 800 0 slc
851 800 0 sfc
38 444 333 562 dbf
118 295 38 444 dbu
0 0 0 slc
0 0 0 sfc
0 16 41 411 dls
41 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
58 427 dlt
4 -16 dlv
4 16 dlv
4 -16 dlv
4 16 dlv
dle
80 420 dlt
11 0 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-6 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
6 0 dlv
2 2 dlv
dle
0 22 98 411 dls
0 22 104 411 dls
126 422 dlt
0 3 dlv
-3 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
2 -2 dlv
5 0 dlv
3 2 dlv
0 2 dlv
dle
0 -22 126 433 dls
0 16 132 411 dls
132 422 dlt
2 3 dlv
2 2 dlv
3 0 dlv
1 -2 dlv
1 -3 dlv
dle
148 424 dlt
1 2 dlv
1 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
0 -13 dlv
dle
158 418 dlt
-1 1 dlv
-2 1 dlv
-5 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -5 dlv
1 -1 dlv
1 -1 dlv
5 0 dlv
2 1 dlv
1 1 dlv
dle
164 427 dlt
5 -16 dlv
3 16 dlv
4 -16 dlv
5 16 dlv
dle
0 16 187 411 dls
0 2 187 431 dls
0 16 193 411 dls
193 422 dlt
1 3 dlv
2 2 dlv
5 0 dlv
2 -2 dlv
1 -3 dlv
0 -11 dlv
dle
211 407 dlt
2 -1 dlv
5 0 dlv
2 1 dlv
1 3 dlv
0 17 dlv
dle
221 422 dlt
-1 3 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
2 -1 dlv
5 0 dlv
3 1 dlv
0 3 dlv
dle
385 334 739 571 clwin
0 0 2550 1484 clwin
1484 2549 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 2550 3300 300 pap
nxp
%%Page: cds 1
0 2 1356 3297 clwin
0 2 1356 3297 clwin
0 0 1356 3300 clwin
1 fds
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <0000> fdf
1 <8000> fdf
1 fde
1 sfp
851 800 0 slc
851 800 0 sfc
ssls
113 1154 1134 3087 dbf
1933 1021 113 1154 dbu
2 fds
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <0000> fdf
2 <f1f1> fdf
2 <1111> fdf
2 <1111> fdf
2 <1f1f> fdf
2 <0000> fdf
2 <0000> fdf
2 fde
2 sfp
149 549 420 slc
149 549 420 sfc
837 1562 915 2501 dbf
939 78 837 1562 dbu
837 473 918 1000 dbf
527 81 837 473 dbu
396 473 837 564 dbf
91 441 396 473 dbu
480 1562 747 2031 dbf
469 267 480 1562 dbu
480 764 747 999 dbf
235 267 480 764 dbu
316 473 397 1000 dbf
527 81 316 473 dbu
320 1562 397 2501 dbf
939 77 320 1562 dbu
3 fds
3 <0101> fdf
3 <0606> fdf
3 <0808> fdf
3 <3030> fdf
3 <4040> fdf
3 <8181> fdf
3 <0202> fdf
3 <0c0c> fdf
3 <1010> fdf
3 <6060> fdf
3 <8080> fdf
3 <0303> fdf
3 <0404> fdf
3 <1818> fdf
3 <2020> fdf
3 <c0c0> fdf
3 fde
3 sfp
902 122 51 slc
902 122 51 sfc
559 708 580 2618 dbf
1910 21 559 708 dbu
647 708 668 2618 dbf
1910 21 647 708 dbu
653 1170 751 1230 dbf
60 98 653 1170 dbu
483 1345 575 1403 dbf
58 92 483 1345 dbu
4 fds
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 <8888> fdf
4 <4444> fdf
4 <2222> fdf
4 <1111> fdf
4 fde
4 sfp
149 549 420 slc
0 800 400 sfc
788 1520 970 2552 dbf
1032 182 788 1520 dbu
439 720 788 1041 dbf
321 349 439 720 dbu
258 1520 439 2552 dbf
1032 181 258 1520 dbu
5 fds
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 <1111> fdf
5 <2222> fdf
5 <4444> fdf
5 <8888> fdf
5 fde
5 sfp
549 549 651 slc
702 702 702 sfc
258 397 439 720 dbf
323 181 258 397 dbu
789 648 971 1042 dbf
394 182 789 648 dbu
439 397 971 648 dbf
251 532 439 397 dbu
439 1520 788 2552 dbf
1032 349 439 1520 dbu
258 720 439 1042 dbf
322 181 258 720 dbu
1000 1000 1000 slc
549 549 651 sfc
342 896 368 922 dbs
651 502 676 527 dbs
591 502 617 527 dbs
862 778 888 804 dbs
601 1993 627 2018 dbs
601 1934 627 1960 dbs
601 1874 627 1900 dbs
500 1358 526 1384 dbs
713 1188 739 1214 dbs
601 1812 627 1838 dbs
404 502 430 527 dbs
601 1693 627 1719 dbs
601 1632 627 1658 dbs
836 502 862 527 dbs
775 502 801 527 dbs
513 1994 539 2020 dbs
865 1574 891 1600 dbs
687 1632 713 1658 dbs
687 1574 713 1600 dbs
862 896 888 922 dbs
862 960 888 986 dbs
342 716 368 742 dbs
862 837 888 863 dbs
342 837 368 863 dbs
342 778 368 804 dbs
342 583 368 608 dbs
865 1632 891 1658 dbs
865 1693 891 1719 dbs
865 1753 891 1779 dbs
865 1812 891 1838 dbs
865 1874 891 1900 dbs
865 1934 891 1960 dbs
865 1993 891 2018 dbs
862 720 888 746 dbs
526 502 552 527 dbs
514 896 540 922 dbs
513 1934 539 1960 dbs
514 960 540 986 dbs
513 1874 539 1900 dbs
513 1812 539 1838 dbs
513 1753 539 1779 dbs
513 1693 539 1719 dbs
513 1632 539 1658 dbs
513 1574 539 1600 dbs
514 778 540 804 dbs
514 837 540 863 dbs
862 599 888 625 dbs
693 837 719 863 dbs
693 896 719 922 dbs
687 1993 713 2018 dbs
687 1934 713 1960 dbs
687 1874 713 1900 dbs
687 1812 713 1838 dbs
687 1753 713 1779 dbs
687 1693 713 1719 dbs
342 651 368 676 dbs
693 960 719 986 dbs
693 778 719 804 dbs
342 960 368 986 dbs
714 502 740 527 dbs
342 1943 368 1969 dbs
342 1583 368 1609 dbs
342 1642 368 1668 dbs
342 1703 368 1729 dbs
342 1763 368 1789 dbs
342 1821 368 1847 dbs
342 1884 368 1909 dbs
601 1753 627 1779 dbs
342 2003 368 2029 dbs
466 502 492 527 dbs
342 513 368 539 dbs
862 660 888 686 dbs
601 1574 627 1600 dbs
6 fds
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 <0000> fdf
6 <1111> fdf
6 <0000> fdf
6 <4444> fdf
6 fde
6 sfp
0 0 1000 slc
0 0 1000 sfc
851 207 898 1001 dbf
794 47 851 207 dbu
856 1529 900 2970 dbf
1441 44 856 1529 dbu
299 2921 916 2971 dbf
50 617 299 2921 dbu
594 1295 639 2049 dbf
754 45 594 1295 dbu
678 1529 722 2970 dbf
1441 44 678 1529 dbu
287 484 929 545 dbf
61 642 287 484 dbu
503 1529 547 2970 dbf
1441 44 503 1529 dbu
958 1060 1014 1383 dbf
323 56 958 1060 dbu
683 769 735 1103 dbf
334 52 683 769 dbu
503 201 550 995 dbf
794 47 503 201 dbu
706 1178 858 1228 dbf
50 152 706 1178 dbu
381 1347 538 1392 dbf
45 157 381 1347 dbu
334 1529 378 2970 dbf
1441 44 334 1529 dbu
593 1317 1011 1378 dbf
61 418 593 1317 dbu
328 201 375 995 dbf
794 47 328 201 dbu
673 1064 1021 1119 dbf
55 348 673 1064 dbu
333 232 360 259 dbf
27 27 333 232 dbu
983 1333 1008 1359 dbf
26 25 983 1333 dbu
815 1188 842 1215 dbf
27 27 815 1188 dbu
589 2929 616 2956 dbf
27 27 589 2929 dbu
393 1359 420 1386 dbf
27 27 393 1359 dbu
549 549 651 slc
549 549 651 sfc
1356 0 0 1529 dls
gfs
%%Trailer
%%EOF
